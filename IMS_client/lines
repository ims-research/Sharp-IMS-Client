using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace IMS_client
{
    public class Address_Book
    {
        public List<Contact> entries;
        
        public Address_Book()
        {
            entries = new List<Contact>();
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Reflection;

namespace IMS_client
{
    /// <summary>
    /// Interaction logic for Address_Book_window.xaml
    /// </summary>
    public partial class Address_Book_window : Window
    {
        Address_Book address_book;
        Contact new_contact;

        public Address_Book_window(Address_Book passed_in_address_book)
        {
            InitializeComponent();
            this.new_contact = new Contact();
            this.address_book = passed_in_address_book;
            this.SizeToContent = SizeToContent.WidthAndHeight;
            PropertyInfo[] properties = null;
            properties = typeof(Contact).GetProperties();

            Create_Add_Contact_Tab(properties);
            if (address_book != null)
            {
                Create_Display_Contact_Tab(properties);
            }
        }

        private void Create_Add_Contact_Tab(PropertyInfo[] properties)
        {
            Grid add_grid = this.Address_book_add_grid;
            ColumnDefinition coldef = new ColumnDefinition();
            add_grid.ColumnDefinitions.Add(coldef);
            coldef = new ColumnDefinition();
            add_grid.ColumnDefinitions.Add(coldef);

            int counter = 0;
            foreach (PropertyInfo prop_info in properties)
            {
                Create_Lbl_Txt_Row(new_contact, counter, ref add_grid, prop_info.Name);
                counter++;
            }
        }

        private void Create_Display_Contact_Tab(PropertyInfo[] properties)
        {
            ComboBox contact_list_box = this.Address_book_combobox;
            contact_list_box.ItemsSource = address_book.entries;

            Grid contact_info_grid = this.Address_book_grid;
            ColumnDefinition coldef = new ColumnDefinition();
            contact_info_grid.ColumnDefinitions.Add(coldef);
            coldef.Width = GridLength.Auto;
            coldef = new ColumnDefinition();
            coldef.Width = GridLength.Auto;
            contact_info_grid.ColumnDefinitions.Add(coldef);

            int counter = 0;
            foreach (PropertyInfo prop_info in properties)
            {
                Create_Lbl_Txt_Row(address_book.entries[0], counter, ref contact_info_grid, prop_info.Name);
                counter++;
            }
            contact_list_box.IsTextSearchEnabled = true;
            contact_list_box.SelectionChanged += new SelectionChangedEventHandler(contact_list_box_SelectionChanged);

        }

        private void Create_Lbl_Txt_Row(Contact binding_source, int row_number, ref Grid grid_to_add_to, string prop_info_name)
        {
            RowDefinition rowdef = new RowDefinition();
            grid_to_add_to.RowDefinitions.Add(rowdef);

            TextBox textbox = new TextBox();
            textbox.Tag = prop_info_name;
            textbox.MaxHeight = 30; 
            textbox.MaxWidth = 200;
            textbox.MinWidth = 100;
            Binding myBinding = null;
            myBinding = new Binding("WidthProperty");
            myBinding.Source = grid_to_add_to.ColumnDefinitions[1].Width;
            textbox.SetBinding(TextBox.WidthProperty,myBinding);

            textbox.HorizontalContentAlignment = HorizontalAlignment.Center;
            textbox.HorizontalAlignment = HorizontalAlignment.Stretch;
            textbox.VerticalContentAlignment = VerticalAlignment.Center;
            textbox.VerticalAlignment = VerticalAlignment.Stretch;
            textbox.Margin = new Thickness(2);

            
            myBinding = new Binding(prop_info_name);
            myBinding.Source = binding_source;
            textbox.SetBinding(TextBox.TextProperty, myBinding);


            TextBlock name = new TextBlock();
            name.Text = prop_info_name;
            name.Margin = new Thickness(2);
            name.HorizontalAlignment = HorizontalAlignment.Right;
            name.VerticalAlignment = VerticalAlignment.Center;

            grid_to_add_to.Children.Add(textbox);
            grid_to_add_to.Children.Add(name);

            Grid.SetColumn(textbox, 1);
            Grid.SetRow(textbox, row_number);

            Grid.SetColumn(name, 0);
            Grid.SetRow(name, row_number);
        }

        private void contact_list_box_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox combo_box = sender as ComboBox;
            Address_Book_window my_address_book_window = TryFindParent<Address_Book_window>(combo_box);
            Grid contact_info_grid = my_address_book_window.Address_book_grid;
            int index = 0;

            if (combo_box.SelectedItem != null)
            {
                foreach (Contact contact in address_book.entries)
                {
                    if (contact.Name == combo_box.SelectedItem.ToString())
                    {
                        index = address_book.entries.IndexOf(contact);
                    }

                }

                foreach (TextBox text_box in contact_info_grid.Children.OfType<TextBox>())
                {
                    Binding myBinding = new Binding(text_box.Tag.ToString());
                    myBinding.Source = address_book.entries[index];
                    text_box.SetBinding(TextBox.TextProperty, myBinding);
                }
            }
        }

        private static T TryFindParent<T>(DependencyObject child) where T : DependencyObject
        {
            //get parent item
            DependencyObject parentObject = VisualTreeHelper.GetParent(child);

            //we've reached the end of the tree
            if (parentObject == null) return null;

            //check if the parent matches the type we're looking for
            T parent = parentObject as T;
            if (parent != null)
            {
                return parent;
            }
            else
            {
                //use recursion to proceed with next level
                return TryFindParent<T>(parentObject);
            }
        }

        private void Add_Contact_Click(object sender, RoutedEventArgs e)
        {
            if (address_book == null)
            {
                address_book = new Address_Book();
            }
            if (new_contact.Name != "")
            {
                address_book.entries.Add(new Contact(new_contact));
                ComboBox contact_list_box = this.Address_book_combobox;
                contact_list_box.Items.Refresh();
                MessageBox.Show("Contact Added");
            }
            else
            {
                MessageBox.Show("Contact must have at least a name");
            }
        }

        private void Remove_Contact_Click(object sender, RoutedEventArgs e)
        {

            Address_Book_window my_address_book_window = TryFindParent<Address_Book_window>(sender as Button);
            ComboBox combo_box = my_address_book_window.Address_book_combobox;

            int index = 0;
            foreach (Contact contact in address_book.entries)
            {
                if (contact.Name == combo_box.SelectedItem.ToString())
                {
                    index = address_book.entries.IndexOf(contact);
                }
            }
            address_book.entries.RemoveAt(index);
            combo_box.Items.Refresh();

        }
    }
}

﻿using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Windows;

namespace IMS_client
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using SipStack;

namespace IMS_client
{

    class Call_Handler
    {

        ClientSipStack stack;
        Preferences settings;
        public CallState call_state;
        Multimedia_Handler media_handler;
        int local_audio_port;
        int local_video_port;
        int remote_audio_port;
        int remote_video_port;
        public bool in_call = false;

        public SipMessage incoming_call = null;
        private SipMessage outgoing_invite = null;

        public event EventHandler StateChanged = null;

        private void OnStateChanged(CallState state)
        {
            if (this.StateChanged != null)
            {
                this.StateChanged(this, new EventArgs());
            }
        }

        public Call_Handler(ClientSipStack Stack, Preferences Settings, Multimedia_Handler Media_handler)
        {
            stack = Stack;
            settings = Settings;
            media_handler = Media_handler;
        }

        public void Start_Call(string to_uri, bool video_enabled, int local_audio_port, int local_video_port)
        {
            in_call = true;
            SipMessage request = new SipMessage();

            request.set_request_line("INVITE", to_uri);
            request.headers["From"] = SipUtilities.sip_tag(settings.ims_private_user_identity) + ";tag=" + SipUtilities.CreateTag();
            request.headers["To"] = SipUtilities.sip_tag(to_uri.Replace("sip:", ""));
            request.headers["CSeq"] = "1" + " INVITE";
            request.headers["Content-Type"] = "application/sdp";

            StringBuilder sb = new StringBuilder();
            sb.Append("v=0\n");
            sb.Append("o=- 0 0 IN IP4 " + settings.ims_ip_address + "\n");
            sb.Append("s=IMS Call\n");
            sb.Append("c=IN IP4 " + settings.ims_ip_address + "\n");
            sb.Append("t=0 0\n");
            sb.Append("m=audio " + local_audio_port + " RTP/AVP 3 0 101\n");
            sb.Append("b=AS:64\n");
            sb.Append("a=rtpmap:3 GSM/8000\n");
            sb.Append("a=rtpmap:0 PCMU/8000\n");
            sb.Append("a=rtpmap:101 telephone-event/8000\n");
            sb.Append("a=fmtp:101 0-11\n");

            if (video_enabled)
            {
                sb.Append("m=video " + local_video_port + " RTP/AVP 96 \n");
                sb.Append("b=AS:128 \n");
                sb.Append("a=rtpmap:96 H263-1998 \n");
                sb.Append("a=fmtp:96 profile-level-id=0 \n");
            }

            request.message_body = sb.ToString();
            outgoing_invite = request;
            stack.SendMessage(request);
        }


        public void Receive_Call()
        {
            if (!(in_call) && (incoming_call != null))
            {
                string remote_sdp = "";
                string remote_ip = "not_found";
                bool video_enabled = false;
                if (incoming_call.headers.ContainsKey("Content-Type") && incoming_call.headers["Content-Type"].ToLower().Contains("application/sdp"))
                {
                    remote_sdp = incoming_call.message_body;

                    foreach (string line in remote_sdp.Split('\n'))
                    {
                        if (line.ToLower().StartsWith("c="))
                        {
                            string[] c_line = line.Split();
                            remote_ip = c_line[2];
                        }

                        if (line.ToLower().StartsWith("m=audio"))
                        {
                            string[] m_audio_line = line.Split();
                            remote_audio_port = Int32.Parse(m_audio_line[1]);
                        }

                        if (line.ToLower().StartsWith("m=video"))
                        {
                            string[] m_video_line = line.Split();
                            remote_video_port = Int32.Parse(m_video_line[1]);
                            video_enabled = true;
                        }
                    }
                }

                in_call = true;
                SipMessage reply = stack.CreateResponse(SipResponseCodes.x200_Ok, incoming_call);
                reply.headers["Content-Type"] = "application/sdp";


                StringBuilder sb = new StringBuilder();
                sb.Append("v=0\n");
                sb.Append("o=- 0 0 IN IP4 " + settings.ims_ip_address + "\n");
                sb.Append("s=IMS Call\n");
                sb.Append("c=IN IP4 " + settings.ims_ip_address + "\n");
                sb.Append("t=0 0\n");
                sb.Append("m=audio " + settings.audiocall_local_port + " RTP/AVP 3 0 101\n");
                sb.Append("b=AS:64\n");
                sb.Append("a=rtpmap:3 GSM/8000\n");
                sb.Append("a=rtpmap:0 PCMU/8000\n");
                sb.Append("a=rtpmap:101 telephone-event/8000\n");
                sb.Append("a=fmtp:101 0-11\n");
                if (video_enabled)
                {
                    sb.Append("m=video " + settings.videocall_local_port + " RTP/AVP 96\n");
                    sb.Append("b=AS:128\n");
                    sb.Append("a=rtpmap:96 H263-1998\n");
                    sb.Append("a=fmtp:96 profile-level-id=0\n");
                }
                reply.message_body = sb.ToString();
                stack.SendMessage(reply);


                in_call = true;
                incoming_call = null;
                call_state = SipStack.CallState.Active;

                media_handler.Start_Audio_Rx(settings.audiocall_local_port, 8);
                media_handler.Start_Audio_Tx(remote_ip, remote_audio_port, 8);

                if (video_enabled)
                {
                    media_handler.Start_Video_Tx(remote_ip, remote_video_port);
                    media_handler.Start_Video_Rx(settings.videocall_local_port,SipUtilities.de_tag(SipUtilities.GetSipUri(incoming_call.headers["From"])));
                }


            }
        }

        void sender_ResponseReceived(object sender, SipMessage message)
        {
            string remote_sdp;
            string remote_ip = "not_found";

            if (message.status_code_type == StatusCodes.Informational)
            {
                if (message.status_code == 100)
                {
                    SetState(CallState.Calling);
                }
                else if (message.status_code == 180)
                {
                    SetState(CallState.Ringing);
                }
                else if (message.status_code == 182)
                {
                    SetState(CallState.Queued);
                }
            }
            else if (message.status_code_type == StatusCodes.Successful)
            {

                if (this.call_state == CallState.Ringing)
                {
                    SetState(CallState.Active);
                    SipMessage request = stack.CreateAck(incoming_call);
                    stack.SendMessage(request);

                    bool video_enabled = false;
                    if (incoming_call.headers.ContainsKey("Content-Type") && incoming_call.headers["Content-Type"].ToLower().Contains("application/sdp"))
                    {
                        remote_sdp = incoming_call.message_body;
                        foreach (string line in remote_sdp.Split('\n'))
                        {
                            if (line.ToLower().StartsWith("c="))
                            {
                                string[] c_line = line.Split();
                                remote_ip = c_line[2];
                            }

                            if (line.ToLower().StartsWith("m=audio"))
                            {
                                string[] m_audio_line = line.Split();
                                remote_audio_port = Int32.Parse(m_audio_line[1]);
                            }

                            if (line.ToLower().StartsWith("m=video"))
                            {
                                string[] m_video_line = line.Split();
                                remote_video_port = Int32.Parse(m_video_line[1]);
                                video_enabled = true;
                            }
                        }
                    }

                    media_handler.Start_Audio_Rx(settings.audiocall_local_port, 8);
                    media_handler.Start_Audio_Tx(remote_ip, remote_audio_port, 8);
                    if (video_enabled)
                    {
                        media_handler.Start_Video_Rx(settings.videocall_local_port,SipUtilities.de_tag(SipUtilities.GetSipUri(outgoing_invite.headers["To"])));
                        media_handler.Start_Video_Tx(remote_ip, remote_video_port);
                    }

                }
                else if (this.call_state == CallState.Ending)
                {
                    SetState(CallState.Ended);
                }

            }
            else if (message.status_code_type == StatusCodes.GlobalFailure)
            {
                if (message.status_code == 603)
                {
                    SetState(CallState.Ending);
                    incoming_call = null;
                    outgoing_invite = null;
                    in_call = false;
                }
            }
        }

        void cancel_ResponseReceived(object sender, SipMessage message)
        {
            if (message.status_code_type == StatusCodes.ClientFailure)
            {
                SetState(CallState.Ended);
                SipMessage request = stack.CreateAck(incoming_call);
                stack.SendMessage(request);
                incoming_call = null;
                outgoing_invite = null;
                in_call = false;
            }
        }


        public void SetState(CallState state)
        {
            call_state = state;
            OnStateChanged(state);
        }

        internal void Stop_Call()
        {
            
            SetState(CallState.Ended);
            string uri = "";
            SipMessage temp = null;
            if (incoming_call !=null)
            {
                temp = incoming_call;
                uri = SipUtilities.de_tag(SipUtilities.GetSipUri(outgoing_invite.headers["From"]));
               
            }
            else if (outgoing_invite != null)
            {
                temp = outgoing_invite;
                uri = SipUtilities.de_tag(SipUtilities.GetSipUri(outgoing_invite.request_line));
            }
            SipMessage request = new SipMessage();
            request.set_request_line("BYE", uri);
            request.headers["From"] = temp.headers["From"];
            request.headers["To"] = temp.headers["To"];
            request.headers["Call-ID"] = temp.headers["Call-ID"];
            stack.SendMessage(request);
            incoming_call = null;
            outgoing_invite = null;
            in_call = false;

            media_handler.Stop_Audio_Rx();
            media_handler.Stop_Audio_Tx();
            media_handler.Stop_Video_Rx();
            media_handler.Stop_Video_Tx();
        }

        internal void Cancel_call(SipMessage e)
        {
            if (in_call)
            {
                if (this.call_state == CallState.Active)
                {
                    Stop_Call();
                }
                else
                {
                    //SIP_Request cancel = stack.CreateRequest(SIP_Methods.CANCEL, new SIP_t_NameAddress(outgoing_invite.m_pHeader.Get("To:")[0].Value), new SIP_t_NameAddress(settings.ims_public_user_identity));
                    //foreach (SIP_HeaderField Header in outgoing_invite.m_pHeader)
                    //{
                    //    if (!Header.Name.ToUpper().Contains("TO") && !Header.Name.ToUpper().Contains("FROM"))
                    //    {
                    //        cancel.m_pHeader.Set(Header.Name, Header.Value);
                    //    }
                    //}
                    //cancel.m_pHeader = outgoing_invite.m_pHeader;
                    //cancel.CSeq = new SIP_t_CSeq(cancel.CSeq.SequenceNumber, SIP_Methods.CANCEL);

                    //SIP_RequestSender cancel_sender = stack.CreateRequestSender(cancel);
                    //cancel_sender.ResponseReceived += new EventHandler<SIP_ResponseReceivedEventArgs>(cancel_ResponseReceived);
                    //cancel_sender.Start();
                }
            }
            else if (e != null)
            {
                if (e.method.ToUpper().Equals("CANCEL"))
                {
                    SetState(CallState.Ended);
                    //SIP_Response response = stack.CreateResponse(SIP_ResponseCodes.x487_Request_Terminated, e.Request);
                    //e.ServerTransaction.SendResponse(response);
                }

            }
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Serialization;

namespace IMS_client
{
    public class Contact
    {
        public string Name { get; set; }
        public string Nickname { get; set; }
        public string Sip_URI { get; set; }
        public string Tel_URI { get; set; }
        public string Email_Address { get; set; }
        public string Group { get; set; }

        [XmlIgnore]
        private Status _status { get; set; }

        public Status Get_Status()
        {
            return _status;
            
        }

        public void Set_Status(Status status)
        {
            _status.basic = status.basic;
            _status.note = status.note;
            _status.display_name = status.display_name;
        }


        public Contact()
        {
            this.Name = "Enter_Name";
            this.Nickname = "Enter_Nickname";
            this.Sip_URI = "Enter_Sip_URI";
            this.Tel_URI = "Enter_Tel_URI";
            this.Email_Address = "Email_Address";
            this.Group = "Enter_Group";

            _status = new Status();
        }

        public Contact(Contact to_clone)
        {
            this.Name = to_clone.Name;
            this.Nickname = to_clone.Nickname;
            this.Sip_URI = to_clone.Sip_URI;
            this.Tel_URI = to_clone.Tel_URI;
            this.Email_Address = to_clone.Email_Address;
            this.Group = to_clone.Group;
            _status = new Status();
            this.Set_Status(to_clone.Get_Status());
        }

        public override string ToString()
        {
            return this.Name;
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Net;

namespace IMS_client
{
    /// <summary>
    /// Interaction logic for debug_window.xaml
    /// </summary>
    public partial class Debug_window : Window
    {
        public Debug_window()
        {
            InitializeComponent();
        }

        private void Debug_sip_msg_listbox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Debug_sip_msg_textbox.Clear();
            if (Debug_sip_msg_listbox.SelectedItem as ListBoxItem != null)
            {
                Debug_sip_msg_textbox.Text = (Debug_sip_msg_listbox.SelectedItem as ListBoxItem).Tag.ToString();
            }
        }

        private void Debug_http_msg_listbox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Debug_http_msg_textbox.Clear();
            if (Debug_http_msg_listbox.SelectedItem as ListBoxItem != null)
            {
                Debug_http_msg_textbox.Text = (Debug_http_msg_listbox.SelectedItem as ListBoxItem).Tag.ToString();
            }
        }

        public void Add_Sip_Response_Message(string status_code, string message)
        {
            ListBoxItem lbi = new ListBoxItem();
            lbi.Content = status_code;
            lbi.Tag = message;
            lbi.ToolTip = message;
            Debug_sip_msg_listbox.Items.Add(lbi);
        }

        public void Add_RAW_Message(string data)
        {
            if (data.Length > 0)
            {
                int min = Math.Min(data.Length, 3);
                ListBoxItem lbi = new ListBoxItem();
                lbi.Content = data.Substring(0, min) + "...";
                lbi.Tag = data;
                lbi.ToolTip = data;
                Raw_msg_listbox.Items.Add(lbi);
            }
        }

        public void Add_Sip_Request_Message(string method, string message)
        {
            ListBoxItem lbi = new ListBoxItem();
            lbi.Content = method;
            lbi.Tag = message;
            lbi.ToolTip = message;
            Debug_sip_msg_listbox.Items.Add(lbi);
        }

        public void Add_Http_Response_Message(HttpWebResponseEventArgs e)
        {
            HttpWebResponse response = e.response;
            ListBoxItem lbi = new ListBoxItem();
            lbi.Content = "Response";

            string headers = "";
            headers += "Response to " + response.Method + " " + response.ResponseUri + "\n";
            foreach (string key in response.Headers)
            {
                headers += key + ":" + response.Headers[key] + "\n";
            }
            lbi.Tag = headers + e.content;
            lbi.ToolTip = headers + e.content;
            Debug_http_msg_listbox.Items.Add(lbi);
        }

        public void Add_Http_Request_Message(HttpRequestEventArgs e)
        {
            HttpWebRequest request = e.request;
            ListBoxItem lbi = new ListBoxItem();
            string headers = "";

            headers += request.Method + " " + request.RequestUri + "\n";

            foreach (string key in request.Headers)
            {
                headers += key + ":" + request.Headers[key] + "\n";
            }
            lbi.Content = request.Method;
            lbi.Tag = headers + e.content;
            lbi.ToolTip = headers + e.content;
            Debug_http_msg_listbox.Items.Add(lbi);
        }

        private void Debug_gst_msg_listbox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Debug_gst_msg_textbox.Clear();
            if (Debug_gst_msg_listbox.SelectedItem as ListBoxItem != null)
            {
                Debug_gst_msg_textbox.Text = (Debug_gst_msg_listbox.SelectedItem as ListBoxItem).Tag.ToString();
            }
        }

        public void Add_Gst_Message(string type, string message)
        {
            ListBoxItem lbi = new ListBoxItem();
            lbi.Content = type;
            lbi.Tag = message;
            lbi.ToolTip = message;
            Debug_gst_msg_listbox.Items.Add(lbi);
        }

        private void Raw_msg_listbox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Raw_msg_textbox.Clear();
            if (Raw_msg_listbox.SelectedItem as ListBoxItem != null)
            {
                Raw_msg_textbox.Text = (Raw_msg_listbox.SelectedItem as ListBoxItem).Tag.ToString();
            }

        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Documents;
using System.Windows.Shapes;
using System.Windows;
using System.Windows.Media;

namespace IMS_client
{
  
        /// <summary>
        /// Displays a semi transparent preview of an element being dragged
        /// </summary>
        public class DragAdorner : Adorner
        {
            private Rectangle _visual;
            private Point _location;

            /// <summary>
            /// Initializes a new instance of DragAdorner
            /// </summary>
            /// <param name="element"></param>
            public DragAdorner(UIElement element)
                : base(element)
            {
                VisualBrush brush = new VisualBrush(element);
                _visual = new Rectangle();

                _visual.Width = element.RenderSize.Width;
                _visual.Height = element.RenderSize.Height;
                _visual.Fill = brush;
                _visual.Opacity = 0.6;
            }

            #region Method overrides

            /// <summary>
            /// Measures the contents of the adorner
            /// </summary>
            /// <param name="constraint"></param>
            /// <returns></returns>
            protected override Size MeasureOverride(Size constraint)
            {
                _visual.Measure(constraint);
                return _visual.DesiredSize;
            }

            /// <summary>
            /// Arranges the contents of the adorner
            /// </summary>
            /// <param name="finalSize"></param>
            /// <returns></returns>
            protected override Size ArrangeOverride(Size finalSize)
            {
                _visual.Arrange(new Rect(finalSize));
                return finalSize;
            }

            /// <summary>
            /// Gets the visual child to display
            /// </summary>
            /// <param name="index"></param>
            /// <returns></returns>
            protected override Visual GetVisualChild(int index)
            {
                return _visual;
            }

            /// <summary>
            /// Retrieves the transform required for displaying the adorner
            /// </summary>
            /// <param name="transform"></param>
            /// <returns></returns>
            public override GeneralTransform GetDesiredTransform(GeneralTransform transform)
            {
                var result = new GeneralTransformGroup();

                result.Children.Add(base.GetDesiredTransform(transform));
                result.Children.Add(new TranslateTransform(_location.X, _location.Y));

                return result;
            }

            #endregion

            #region Public properties

            /// <summary>
            /// Gets the number of visual childs displayed
            /// </summary>
            protected override int VisualChildrenCount
            {
                get { return 1; }
            }

            /// <summary>
            /// Gets or sets the location of the adorner
            /// </summary>
            public Point Location
            {
                get { return _location; }
                set
                {
                    _location = value;
                    UpdateLocation();
                }
            }

            #endregion

            #region Private methods

            /// <summary>
            /// Updates the location of the adorner
            /// </summary>
            private void UpdateLocation()
            {
                AdornerLayer layer = (AdornerLayer)this.Parent;
                layer.Update(AdornedElement);
            }

            #endregion
        }
    }
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;


namespace IMS_client
{
    public class ImageButton : System.Windows.Controls.Button // Taken from example by Alex Yakhnin
    {
        static ImageButton()
        {
            //This OverrideMetadata call tells the system that this element wants to provide a style that is different than its base class.

            DefaultStyleKeyProperty.OverrideMetadata(typeof(ImageButton), new FrameworkPropertyMetadata(typeof(ImageButton)));
        }


        #region properties

        public string ImageOver
        {
            get { return (string)GetValue(ImageOverProperty); }
            set { SetValue(ImageOverProperty, value); }
        }

        public string ImageNormal
        {
            get { return (string)GetValue(ImageNormalProperty); }
            set { SetValue(ImageNormalProperty, value); }
        }

        public string ImageDown
        {
            get { return (string)GetValue(ImageDownProperty); }
            set { SetValue(ImageDownProperty, value); }
        }

        public string Text
        {
            get { return (string)GetValue(TextProperty); }
            set { SetValue(TextProperty, value); }
        }


        #endregion

        #region dependency properties

        public static readonly DependencyProperty ImageNormalProperty =
           DependencyProperty.Register(
               "ImageNormal", typeof(string), typeof(ImageButton));


        public static readonly DependencyProperty ImageOverProperty =
          DependencyProperty.Register(
              "ImageOver", typeof(string), typeof(ImageButton));

        public static readonly DependencyProperty ImageDownProperty =
        DependencyProperty.Register(
            "ImageDown", typeof(string), typeof(ImageButton));

        public static readonly DependencyProperty TextProperty =
           DependencyProperty.Register(
               "Text", typeof(string), typeof(ImageButton));

        #endregion

    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using SipStack;
namespace IMS_client
{
    public class IM_Handler
    {

        public class Message_Received_Args : EventArgs
        {
            public string contact;
            public string message;

            public Message_Received_Args(string Contact, string Message)
            {
                contact = Contact;
                message = Message;
            }
        }

        public class Typing_Message_Recieved_Args : EventArgs
        {
            public string contact;
            public string message;

            public Typing_Message_Recieved_Args(string Contact, string Message)
            {
                contact = Contact;
                message = Message;
            }
        }
        
        public event EventHandler<Message_Received_Args> Message_Recieved_Event;
        public event EventHandler<Typing_Message_Recieved_Args> Typing_Message_Recieved_Event;

        ClientSipStack stack;
        Preferences settings;

        public IM_Handler(ClientSipStack Stack, Preferences Settings)
        {
            stack = Stack;
            settings = Settings;
        }

        public void Send_Message(string sip_uri, string message)
        {
            SipMessage request = new SipMessage();
            request.set_request_line("MESSAGE", sip_uri);
            request.headers["From"] = SipUtilities.sip_tag(settings.ims_private_user_identity) + ";tag=" + SipUtilities.CreateTag();
            request.headers["To"] = SipUtilities.sip_tag(sip_uri.Replace("sip:", ""));
            request.headers["CSeq"] = "5" + " MESSAGE";
            request.headers["Content-Type"] = "text/plain";
            request.message_body = message;
            stack.SendMessage(request);
        }

        public void Process_Message(SipMessage request)
        {
            SipMessage reply = stack.CreateResponse(SipResponseCodes.x200_Ok, request);
            stack.SendMessage(reply);

            if (request.headers["Content-Type"].ToUpper().Contains("TEXT/PLAIN"))
            {
                try
                {
                    if (this.Message_Recieved_Event != null)
                    {
                        this.Message_Recieved_Event(this, new Message_Received_Args(SipUtilities.GetSipUri(request.headers["From"]), request.message_body));
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show("Error in handling IM Message : " + exception.Message);
                }
            }
            else if (request.headers["Content-Type"].ToUpper().Equals("APPLICATION/IM-ISCOMPOSING+XML"))
            {
                try
                {
                    if (this.Typing_Message_Recieved_Event != null)
                    {
                        this.Typing_Message_Recieved_Event(this, new Typing_Message_Recieved_Args(SipUtilities.GetSipUri(request.headers["From"]), request.message_body));
                    }
                }
                catch (Exception exception)
                {
                    MessageBox.Show("Error in handling IM Message : " + exception.Message);
                }

            }

        }

        public void Send_Typing_Notice(string sip_uri)
        {
            SipMessage request = new SipMessage();
            request.set_request_line("MESSAGE", sip_uri);
            request.headers["From"] = SipUtilities.sip_tag(settings.ims_private_user_identity) + ";tag=" + SipUtilities.CreateTag();
            request.headers["To"] = SipUtilities.sip_tag(sip_uri.Replace("sip:", ""));
            request.headers["CSeq"] = "5" + " MESSAGE";
            request.headers["Content-Type"] = "application/im-iscomposing+xml";

            StringBuilder sb = new StringBuilder();
            sb.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
            sb.Append("<isComposing xmlns=\"urn:ietf:params:xml:ns:im-iscomposing\"\n");
            sb.Append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");
            sb.Append("xsi:schemaLocation=\"urn:ietf:params:xml:ns:im-composing iscomposing.xsd\">\n");
            sb.Append("<state>active</state>\n");
            sb.Append("<contenttype>text/plain</contenttype>\n");
            sb.Append("</isComposing>");

            request.message_body = sb.ToString();

            stack.SendMessage(request);
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace IMS_client
{
    /// <summary>
    /// Interaction logic for IM_window.xaml
    /// </summary>
    public partial class IM_window : Window
    {
        public IM_window()
        {
            InitializeComponent();
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Media;
using System.Windows.Threading;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Net.Sockets;
using System.Globalization;
using System.Threading;
using System.Text;
using System.Text.RegularExpressions;
using SipStack;

namespace IMS_client
{
    /// <summary>
    /// Interaction logic for Window1.xaml
    /// </summary>
    public partial class Main_window : Window
    {
        #region Global_Variables

        ClientSipStack sip_stack;
        Preferences settings;
        Address_Book address_book;

        Debug_window my_debug_window;
        IM_window my_im_window;

        XDMS_handler xdms_handler;
        Presence_Handler presence_handler;
        IM_Handler im_handler;
        Multimedia_Handler media_handler;
        Call_Handler call_handler;

        MediaPlayer sound_player = new MediaPlayer();

        static Random r = new Random();


        bool main_window_is_closed;

        #endregion

        #region Global_Methods
        public static T TryFindParent<T>(DependencyObject child) where T : DependencyObject
        {
            //get parent item
            DependencyObject parentObject = VisualTreeHelper.GetParent(child);

            //we've reached the end of the tree
            if (parentObject == null) return null;

            //check if the parent matches the type we're looking for
            T parent = parentObject as T;
            if (parent != null)
            {
                return parent;
            }
            else
            {
                //use recursion to proceed with next level
                return TryFindParent<T>(parentObject);
            }
        }
        #endregion

        public Main_window()
        {

            InitializeComponent();

            ImageSource source = this.Icon;

            this.Closed += new EventHandler(Main_window_Closed);
            my_debug_window = new Debug_window();
            my_debug_window.Closing += new System.ComponentModel.CancelEventHandler(my_debug_window_Closing);

            my_im_window = new IM_window();
            my_im_window.Closing += new System.ComponentModel.CancelEventHandler(my_im_window_Closing);

            this.Loaded += new RoutedEventHandler(Main_window_Loaded);

        }

        void Main_window_Loaded(object sender, RoutedEventArgs e)
        {

            Load_Settings();
            Create_Media_Handler();

            if (settings.xdms_enabled)
            {
                Create_XDMS_Handler();
            }

            Create_Stack();
            if (settings.presence_enabled)
            {
                Create_Presence_Handler();
            }

            Create_IM_Handler();

            Create_Call_Handler();
            Load_Address_Book();

        }

        void stack_Error_Event(object sender, StackErrorEventArgs e)
        {
            MessageBox.Show("Generic Error: " + e.exception.ToString());
        }

        void stack_Raw_Sent_Event(object sender, RawEventArgs event_holder)
        {
            Add_RAW_Message_Handler message_handler = new Add_RAW_Message_Handler(my_debug_window.Add_RAW_Message);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, event_holder.data);
        }

        void stack_Raw_Recv_Event(object sender, RawEventArgs event_holder)
        {
            Add_RAW_Message_Handler message_handler = new Add_RAW_Message_Handler(my_debug_window.Add_RAW_Message);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, event_holder.data);
        }

        private void Load_Address_Book()
        {
            if (settings.xdms_enabled)
            {
                address_book = Retrieve_Address_Book(xdms_handler);
            }
            if (address_book == null)
            {
                try
                {
                    XDocument x_doc = XDocument.Load("Resources\\address_book.xml");
                    address_book = Load_Address_Book_from_Xml(x_doc);
                }
                catch (Exception e)
                {
                }
            }
            if (address_book == null)
            {
                MessageBox.Show("Error with Address Book - creating new one");
                address_book = new Address_Book();
                address_book.entries.Add(new Contact());
            }
            foreach (Contact contact in address_book.entries)
            {
                Add_Status_Item_Handler handler = new Add_Status_Item_Handler(Add_Contact_Status_Item);
                Dispatcher.BeginInvoke(DispatcherPriority.Render, handler, contact);
            }
        }

        void sound_player_MediaEnded(object sender, EventArgs e)
        {
            sound_player.Position = new TimeSpan();
        }

        #region Startup_Methods
        private void Create_Stack()
        {
            string myHost = System.Net.Dns.GetHostName();
            System.Net.IPHostEntry myIPs = System.Net.Dns.GetHostEntry(myHost);

            
            int port = 6789;

            if (settings.ims_use_detected_ip)
            {
                settings.ims_ip_address = get_local_ip();
            }

            while (!CheckPortUsage(settings.ims_ip_address, port))
            {
                port = r.Next(5060, 6000); ;
            }
            settings.ims_port = port;

            sip_stack = new ClientSipStack(IPAddress.Parse(settings.ims_ip_address), port);
            sip_stack.normal_route = "<sip:"+settings.ims_proxy_cscf_hostname + ":" + settings.ims_proxy_cscf_port+">" ;

            sip_stack.Raw_Sent_Event += new EventHandler<RawEventArgs>(stack_Raw_Sent_Event);
            sip_stack.Raw_Recv_Event += new EventHandler<RawEventArgs>(stack_Raw_Recv_Event);
            sip_stack.Request_Recv_Event += new EventHandler<SipMessageEventArgs>(stack_Request_Recv_Event);
            sip_stack.Response_Recv_Event += new EventHandler<SipMessageEventArgs>(stack_Response_Recv_Event);
            sip_stack.Sip_Sent_Event += new EventHandler<SipMessageEventArgs>(stack_Sip_Sent_Event);
            sip_stack.Error_Event += new EventHandler<StackErrorEventArgs>(stack_Error_Event);
            sip_stack.Reg_Event += new EventHandler<RegistrationChangedEventArgs>(stack_Reg_Event);
        }

        void stack_Sip_Sent_Event(object sender, SipMessageEventArgs e)
        {
            if (SipUtilities.isRequest(e.message))
            {

                Add_Sip_Request_Message_Handler message_handler = new Add_Sip_Request_Message_Handler(my_debug_window.Add_Sip_Request_Message);
                Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, e.message.method, e.message.print_message(true));
            }
            else
            {
                Add_Sip_Response_Message_Handler message_handler = new Add_Sip_Response_Message_Handler(my_debug_window.Add_Sip_Response_Message);
                Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, e.message.status_code.ToString(), e.message.print_message(true));

            }
        }

        void stack_Reg_Event(object sender, RegistrationChangedEventArgs e)
        {
            string state = e.state;

            Update_Status_Text(state);
            if (state.ToString() == "Registered")
            {
                settings.ims_service_route = "";
                string[] lines = Regex.Split(e.message.headers["Service-Route"], "\r\n");
                foreach (string address in lines)
                {
                    settings.ims_service_route += address;
                }


                if (settings.presence_enabled)
                {
                    presence_handler.Publish(settings.ims_public_user_identity, "open", "Available", 3600);
                    Retrieve_Status_Of_Contacts();
                }
            }
        }

        void stack_Response_Recv_Event(object sender, SipMessageEventArgs e)
        {
            Add_Sip_Response_Message_Handler message_handler = new Add_Sip_Response_Message_Handler(my_debug_window.Add_Sip_Response_Message);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, e.message.status_code.ToString(), e.message.print_message(true));

            SipMessage response = e.message;
            if (response.status_code_type == StatusCodes.Informational)
            {
            }
            else if (response.status_code_type == StatusCodes.Successful)
            {
                if (response.headers["cseq"].ToUpper().Contains("REGISTER"))
                {
                    sip_stack.registration.latest_response = response;
                    sip_stack.service_route = response.headers["Service-Route"];
                    string temp = sip_stack.registration.latest_request.headers["contact"];
                    if (temp.Contains("expires"))
                    {
                        
                        int expires = int.Parse(temp.Substring(temp.IndexOf("expires=")+8));
                        if (expires > 0)
                        {
                            sip_stack.registration.current_state = "Registered";
                            stack_Reg_Event(this, new RegistrationChangedEventArgs("Registered", response));
                        }
                        else if (expires == 0)
                        {
                            sip_stack.registration.current_state = "Deregistered";
                            stack_Reg_Event(this, new RegistrationChangedEventArgs("Deregistered", response));
                       }

                    }
                    
                }
            }
            else if (response.status_code_type == StatusCodes.Redirection)
            {
            }
            else if (response.status_code_type == StatusCodes.ClientFailure)
            {
                ProcessClientFailure(response);
            }
            else if (response.status_code_type == StatusCodes.ServerFailure)
            {
            }
            else if (response.status_code_type == StatusCodes.GlobalFailure)
            {
            }
            else if (response.status_code_type == StatusCodes.Unknown)
            {
                MessageBox.Show("Unkown Status Code Type");
            }
        }

        void ProcessClientFailure(SipMessage response)
        {
            if (response.status_code == 401)
            {
                sip_stack.registration.latest_response = response;
                sip_stack.registration.auth_header = response.headers["WWW-Authenticate"];
                string temp = sip_stack.registration.latest_request.headers["contact"];
                string expires = temp.Substring(temp.IndexOf("expires=") + 8);
                sip_stack.ReRegister(expires);
            }
            else if (response.status_code == 403)
            {
                sip_stack.registration.current_state = "Deregistered";
                stack_Reg_Event(this, new RegistrationChangedEventArgs("Deregistered", response));   
            }
        }

        void stack_Request_Recv_Event(object sender, SipMessageEventArgs e)
        {
            Add_Sip_Request_Message_Handler message_handler = new Add_Sip_Request_Message_Handler(my_debug_window.Add_Sip_Request_Message);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, e.message.method, e.message.print_message(true));

            SipMessage message = e.message;
            if (message.request_line.ToUpper().Contains("INVITE"))
            {
                call_handler.incoming_call = message;
                call_handler.Receive_Call();
            }
            else if (message.headers.ContainsKey("event"))
            {
                if (message.headers["event"].Contains("presence"))
                {
                    presence_handler.Process_Request(message);
                }
            }
            else if (message.request_line.ToUpper().Contains("MESSAGE"))
            {
                im_handler.Process_Message(message);
            }
            else if (message.request_line.ToUpper().Contains("CANCEL"))
            {
                call_handler.Cancel_call(message);
            }

        }

        string get_local_ip()
        {
            string strHostName = "";
            strHostName = Dns.GetHostName();
            IPHostEntry ipEntry = Dns.GetHostEntry(strHostName);
            IPAddress[] addr = ipEntry.AddressList;
            for (int i = 0; i < addr.Length; i++)
            {
                if (addr[i].AddressFamily.ToString() == "InterNetwork")
                {
                    if (addr[i].ToString() == "127.0.0.1")
                    {
                        break;
                    }
                    return addr[i].ToString();
                }
            }
            MessageBox.Show("Only detected local loop back network interface!");
            return "127.0.0.1";
        }

        private void Create_XDMS_Handler()
        {
            xdms_handler = new XDMS_handler(settings.xdms_user_name,
                settings.xdms_password,
                settings.xdms_server_name,
                settings.xdms_server_port,
                settings.ims_realm);

            xdms_handler.Request_Log_Event += new EventHandler<HttpRequestEventArgs>(XDMS_Request_Log_Event);
            xdms_handler.Response_Log_Event += new EventHandler<HttpWebResponseEventArgs>(XDMS_Response_Log_Event);
        }

        private void Load_Settings()
        {
            settings = Load_Settings_from_Xml("Resources\\settings.xml");
            if (settings == null)
            {
                settings = new Preferences();
            }
            settings.audiocall_local_port = r.Next(1025, 65535);
            settings.videocall_local_port = r.Next(1025, 65535);
        }

        private void Create_Presence_Handler()
        {
            presence_handler = new Presence_Handler(sip_stack, settings);
            presence_handler.Presence_Changed_Event += new EventHandler<Presence_Handler.PresenceChangedArgs>(presence_handler_Presence_Changed_Event);
        }

        private void Create_IM_Handler()
        {
            im_handler = new IM_Handler(sip_stack, settings);
            im_handler.Message_Recieved_Event += new EventHandler<IM_Handler.Message_Received_Args>(im_handler_Message_Recieved_Event);
            im_handler.Typing_Message_Recieved_Event += new EventHandler<IM_Handler.Typing_Message_Recieved_Args>(IM_Message_Status_Event);

        }

        private void Create_Media_Handler()
        {
            media_handler = new Multimedia_Handler(settings);
            media_handler.Gst_Log_Event += new EventHandler<GstMessageEventArgs>(Gst_Message_Log_Event);
        }

        private void Create_Call_Handler()
        {
            call_handler = new Call_Handler(sip_stack, settings, media_handler);
            call_handler.StateChanged += new EventHandler(call_handler_StateChanged);
        }

        void call_handler_StateChanged(object sender, EventArgs e)
        {
            Call_Handler handler = sender as Call_Handler;
            Update_Status_Text(handler.call_state.ToString());
            if (handler.call_state.ToString() == "Ringing")
            {
                sound_player.Dispatcher.Invoke(
                    System.Windows.Threading.DispatcherPriority.Normal,
                    new Action(
                        delegate()
                        {
                            sound_player.Open(new Uri("Resources/ctu24ringtone.mp3", UriKind.Relative));
                            sound_player.MediaEnded += new EventHandler(sound_player_MediaEnded);
                            sound_player.Play();
                        }));
            }
            else
            {
                sound_player.Dispatcher.Invoke(
                 System.Windows.Threading.DispatcherPriority.Normal,
                 new Action(
                     delegate()
                     {
                         sound_player.Stop();
                     }));
            }
        }


        #endregion

        #region Utilities

        public static bool CheckPortUsage(string ip, int port)
        {
            try
            {
                UdpClient udp_client = new UdpClient(new IPEndPoint(IPAddress.Parse(ip), port));
                udp_client.Close();
                return true;
            }
            catch (SocketException error)
            {
                if (error.SocketErrorCode == SocketError.AddressAlreadyInUse /* check this is the one you get */ )
                    return false;
                throw error;
            }
        }


        
        private void Update_Status_Text(string status)
        {
            Status_Text.Dispatcher.Invoke(
           System.Windows.Threading.DispatcherPriority.Normal,
           new Action(
             delegate()
             {
                 Status_Text.Text = status;
             }));
        }

        #endregion

        #region Address_Book

        private Address_Book Retrieve_Address_Book(XDMS_handler xdms_handler)
        {
            Address_Book temp_address_book = null;
            XDocument xml_document = xdms_handler.Retrieve_File("Resources\\address_book.xml");
            if (xml_document.Root != null)
            {
                temp_address_book = Load_Address_Book_from_Xml(xml_document);
            }
            return temp_address_book;
        }

        private void Save_Address_Book(Address_Book address_book, XDMS_handler xdms_handler)
        {
            string xml = Save_Address_Book_to_Xml(address_book);
            if (settings.xdms_enabled)
            {
                xdms_handler.Store_File("address_book.xml", xml);
            }
        }

        private Address_Book Load_Address_Book_from_Xml(XDocument xml_document)
        {

            Address_Book address_book = null;
            if (xml_document.Root != null)
            {
                try
                {
                    XmlSerializer serializer = new XmlSerializer(typeof(Address_Book));
                    XmlReader reader = xml_document.CreateReader();
                    address_book = (Address_Book)serializer.Deserialize(reader);
                    reader.Close();
                }
                catch (Exception e)
                {
                    MessageBox.Show("Error in loading address book from xml: " + e.Message);
                    MessageBox.Show("Base Exception: " + e.GetBaseException());
                }
            }
            else
            {
                MessageBox.Show("Address book xml not found");
            }
            if (address_book != null)
            {
                foreach (Contact contact in address_book.entries)
                {
                    contact.Get_Status().display_name = contact.Name;
                }
            }

            return address_book;
        }

        private string Save_Address_Book_to_Xml(Address_Book address_book)
        {
            XElement xe = null;
            string xmlDocumentWithDeclaration = "";
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(Address_Book));
                TextWriter writer = new StreamWriter("temp");
                serializer.Serialize(writer, address_book);
                writer.Close();

                XDocument x_doc = XDocument.Load("temp");
                XmlDocument xmlDocument = new XmlDocument();
                xmlDocument.LoadXml(x_doc.ToString());

                XmlDeclaration xmlDeclaration;
                xmlDeclaration = xmlDocument.CreateXmlDeclaration("1.0", "UTF-8", null);
                XmlElement root = xmlDocument.DocumentElement;
                xmlDocument.InsertBefore(xmlDeclaration, root);
                xmlDocumentWithDeclaration = xmlDocument.InnerXml;
            }
            catch (Exception e)
            {
                MessageBox.Show("Error in saving address book to xml: " + e.Message);
                MessageBox.Show("Base Exception: " + e.GetBaseException());
            }
            Save_Address_Book_To_File("Resources\\address_book.xml", xmlDocumentWithDeclaration);
            return xmlDocumentWithDeclaration;
        }

        private void Save_Address_Book_To_File(string filename, string xml)
        {
            TextWriter writer = new StreamWriter(filename);
            writer.Write(xml);
            writer.Close();
        }

        private void Address_Book_Menu_Click(object sender, RoutedEventArgs e)
        {
            Address_Book_window my_address_book_window = new Address_Book_window(address_book);

            my_address_book_window.Show();
            my_address_book_window.SizeToContent = SizeToContent.Manual;
            my_address_book_window.Closed += new EventHandler(My_Address_Book_Window_Closed);
        }

        #endregion

        #region Log_Events

        void XDMS_Request_Log_Event(object sender, HttpRequestEventArgs e)
        {
            Add_Http_Request_Message_Handler message_handler = new Add_Http_Request_Message_Handler(my_debug_window.Add_Http_Request_Message);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, e);
        }

        void XDMS_Response_Log_Event(object sender, HttpWebResponseEventArgs e)
        {
            Add_Http_Response_Message_Handler message_handler = new Add_Http_Response_Message_Handler(my_debug_window.Add_Http_Response_Message);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, e);
        }



        void Gst_Message_Log_Event(object sender, GstMessageEventArgs e)
        {
            Add_Gst_Message_Handler message_handler = new Add_Gst_Message_Handler(my_debug_window.Add_Gst_Message);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, message_handler, e.type, e.message);
        }

        delegate void Add_Sip_Response_Message_Handler(string Code, string message);
        delegate void Add_Sip_Request_Message_Handler(string method, string message);

        delegate void Add_RAW_Message_Handler(string message);


        delegate void Add_Http_Response_Message_Handler(HttpWebResponseEventArgs response);
        delegate void Add_Http_Request_Message_Handler(HttpRequestEventArgs request);

        delegate void Add_Gst_Message_Handler(string type, string message);


        #endregion

        #region Window_Events

        void Main_window_Closed(object sender, EventArgs e)
        {
            main_window_is_closed = true;
            media_handler.Stop_Loop();
            my_debug_window.Close();
            my_im_window.Close();
            media_handler.video_window.Close();
            Save_Settings_to_Xml("Resources\\settings.xml", settings);
            if (sip_stack.isRunning)
            {
                if (sip_stack.registration != null)
                {
                    sip_stack.Deregister();
                    
                    if (settings.presence_enabled && presence_handler != null)
                    {
                        presence_handler.Publish(settings.ims_public_user_identity, "closed", "Offline", 3600);
                    }
                }
                sip_stack.Stop();
            }
        }

        void Settings_window_Closed(object sender, EventArgs e)
        {
            Save_Settings_to_Xml("Resources\\settings.xml", settings);
        }

        void My_Address_Book_Window_Closed(object sender, EventArgs e)
        {
            if (address_book != null)
            {
                Save_Address_Book(address_book, xdms_handler);
            }
        }

        void my_debug_window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (!main_window_is_closed)
            {
                Debug_window debug_window = sender as Debug_window;
                e.Cancel = true;
                Application.Current.Dispatcher.BeginInvoke(DispatcherPriority.Background,
             (DispatcherOperationCallback)(arg => { this.Show_Debug_Log_MenuItem.IsChecked = false; return null; }), null);
            }

        }

        private void Show_Debug_Log_Checked(object sender, RoutedEventArgs e)
        {
            my_debug_window.Show();
        }

        private void Show_Debug_Log_Unchecked(object sender, RoutedEventArgs e)
        {
            my_debug_window.Hide();
        }

        void my_im_window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (!main_window_is_closed)
            {
                IM_window im_window = sender as IM_window;
                e.Cancel = true;
                Application.Current.Dispatcher.BeginInvoke(DispatcherPriority.Background,
             (DispatcherOperationCallback)(arg => { im_window.Hide(); return null; }), null);
            }

        }


        #endregion

        #region Registration

        private void reg_known_user_Click(object sender, RoutedEventArgs e)
        {
            MenuItem mi = sender as MenuItem;
            settings.ims_private_user_identity = mi.Tag.ToString();
            settings.ims_public_user_identity = "sip:" + mi.Tag;
            settings.ims_password = mi.Tag.ToString().Remove(mi.Tag.ToString().IndexOf('@'));
            Register();
        }

        private void Register()
        {
            string username = settings.ims_private_user_identity.Split('@')[0];
            SipRegistration registration = new SipRegistration(username, settings.ims_password, settings.ims_realm);
            sip_stack.Register(registration.latest_request, registration, "3600");
        }

        private void Register_Click(object sender, RoutedEventArgs e)
        {
            Register();
        }

        private void Deregister_Click(object sender, RoutedEventArgs e)
        {
            if (sip_stack.registration != null)
            {
                string current_state = sip_stack.registration.current_state;
                if (current_state.ToUpper().Equals("REGISTERED") ||
                    current_state.ToUpper().Equals("REGISTERING"))
                {
                    sip_stack.Deregister();

                    if (settings.presence_enabled)
                    {
                        presence_handler.Publish(settings.ims_public_user_identity, "closed", "Offline", 3600);
                    }
                }
            }
        }

        #endregion

        #region Presence

        private void Retrieve_Status_Of_Contacts()
        {
            Status_ListBox.Dispatcher.Invoke(
          System.Windows.Threading.DispatcherPriority.Normal,
          new Action(
            delegate()
            {
                Status_ListBox.Items.Clear();
            }));
            foreach (Contact contact in address_book.entries)
            {
                Add_Status_Item_Handler handler = new Add_Status_Item_Handler(Add_Contact_Status_Item);
                Dispatcher.BeginInvoke(DispatcherPriority.Render, handler, contact);
                presence_handler.Subscribe(contact.Sip_URI);
            }
        }

        delegate void Add_Status_Item_Handler(Contact contact);

        private MenuItem Create_Menu_Item(string tag, string title)
        {
            MenuItem menu_item = new MenuItem();

            menu_item.Tag = tag;

            TextBlock txt_block = new TextBlock();
            txt_block.Text = title;
            menu_item.Header = txt_block;
            return menu_item;
        }

        private ContextMenu Create_Contact_Context_Menu(string tag)
        {
            ContextMenu context_menu = new ContextMenu();
            MenuItem temp_menu_item = Create_Menu_Item(tag, "Voice Call");
            temp_menu_item.Click += new RoutedEventHandler(Voice_Call_menu_item_Click);
            context_menu.Items.Add(temp_menu_item);

            temp_menu_item = Create_Menu_Item(tag, "Video Call");
            temp_menu_item.Click += new RoutedEventHandler(Video_Call_menu_item_Click);
            context_menu.Items.Add(temp_menu_item);

            temp_menu_item = Create_Menu_Item(tag, "Send Message");
            temp_menu_item.Click += new RoutedEventHandler(Send_Message_menu_item_Click);
            context_menu.Items.Add(temp_menu_item);
            return context_menu;

        }

        void Voice_Call_menu_item_Click(object sender, RoutedEventArgs e)
        {
            MenuItem mi = sender as MenuItem;
            call_handler.Start_Call(mi.Tag.ToString(), false, settings.audiocall_local_port, settings.videocall_local_port);
        }

        void Video_Call_menu_item_Click(object sender, RoutedEventArgs e)
        {
            MenuItem mi = sender as MenuItem;
            call_handler.Start_Call(mi.Tag.ToString(), true, settings.audiocall_local_port, settings.videocall_local_port);
        }

        private void Add_Contact_Status_Item(Contact contact)
        {
            try
            {
                StackPanel stack_panel = new StackPanel();
                stack_panel.Orientation = Orientation.Horizontal;
                stack_panel.HorizontalAlignment = HorizontalAlignment.Stretch;
                stack_panel.Background = Brushes.Transparent;
                stack_panel.ContextMenu = Create_Contact_Context_Menu(contact.Sip_URI);

                Image basic = new Image();
                basic.Margin = new Thickness(10);
                Binding my_binding = new Binding("basic");
                my_binding.BindsDirectlyToSource = true;
                my_binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
                my_binding.Source = contact.Get_Status();
                my_binding.Converter = new Status_Converter();
                basic.SetBinding(Image.SourceProperty, my_binding);
                basic.Width = 30;

                my_binding = new Binding("basic");
                my_binding.BindsDirectlyToSource = true;
                my_binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
                my_binding.Source = contact.Get_Status();
                basic.SetBinding(Image.ToolTipProperty, my_binding);


                TextBlock note = new TextBlock();
                note.HorizontalAlignment = HorizontalAlignment.Center;
                note.VerticalAlignment = VerticalAlignment.Center;
                my_binding = new Binding("note");
                my_binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
                my_binding.Source = contact.Get_Status();
                note.SetBinding(TextBlock.ToolTipProperty, my_binding);

                my_binding = new Binding("display_name");
                my_binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
                my_binding.Source = contact.Get_Status();
                note.SetBinding(TextBlock.TextProperty, my_binding);



                stack_panel.Children.Add(basic);
                stack_panel.Children.Add(note);
                ListBoxItem lbi = new ListBoxItem();
                lbi.Content = stack_panel;

                Status_ListBox.Items.Add(lbi);
                Status_ListBox.Items.Refresh();
            }
            catch (Exception e)
            {
                MessageBox.Show("Creating Status Item " + e.Message);
            }
        }

        void presence_handler_Presence_Changed_Event(object sender, Presence_Handler.PresenceChangedArgs e)
        {

            bool found_contact = false;
            int index = -1;
            int counter = 0;
            try
            {
                foreach (Contact contact in address_book.entries)
                {
                    if (contact.Sip_URI == e.contact)
                    {
                        Status status = contact.Get_Status();
                        status.basic = e.basis;
                        status.note = e.note;

                        found_contact = true;
                        index = counter;

                    }
                    counter++;
                }
                if (!found_contact)
                {
                    MessageBox.Show("Did not find contact for status update (" + e.contact + ")");
                }
            }
            catch (Exception exc)
            {
                MessageBox.Show("Error in Presence Status Update : " + exc.Message);
            }
        }
        #endregion

        #region IM

        delegate void Add_Msg_To_Conv_Handler(string contact, string message);
        private void Add_Msg_To_Conversation(string contact, string message)
        {
            if (!Message_Tab_Exists(contact))
            {
                Create_Message_Tab(contact);
            }

            foreach (TabItem tab_item in my_im_window.IM_TabControl.Items)
            {
                if (tab_item.Tag.ToString() == contact)
                {
                    DockPanel dock_panel = tab_item.Content as DockPanel;

                    Label status_label = dock_panel.Children[1] as Label;
                    status_label.Content = "Message Recieved";

                    RichTextBox text_box = dock_panel.Children[2] as RichTextBox;
                    FlowDocument flow_doc = text_box.Document;

                    Paragraph para = new Paragraph();
                    Span username = new Span();
                    username.Foreground = Brushes.Red;
                    username.Inlines.Add(CultureInfo.CurrentCulture.TextInfo.ToTitleCase(contact.Substring(4, contact.IndexOf('@') - 4)) + ": ");

                    para.Inlines.Add(username);

                    para.Inlines.Add(message);
                    flow_doc.Blocks.Add(para);

                    //text_box.Foreground = Brushes.Red;
                    //text_box.AppendText(CultureInfo.CurrentCulture.TextInfo.ToTitleCase(contact.Substring(4, contact.IndexOf('@') - 4)) + ":");
                    //text_box.Foreground = Brushes.Black;
                    //text_box.AppendText(message+"\n");
                }
            }
            my_im_window.Show();
        }

        void im_handler_Message_Recieved_Event(object sender, IM_Handler.Message_Received_Args e)
        {
            Add_Msg_To_Conv_Handler handler = new Add_Msg_To_Conv_Handler(Add_Msg_To_Conversation);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, handler, e.contact, e.message);
        }

        delegate void Update_IM_Message_Status_Handler(string contact, string status);
        private void Update_IM_Message_Status(string contact, string status)
        {
            foreach (TabItem tab_item in my_im_window.IM_TabControl.Items)
            {
                if (tab_item.Tag.ToString() == contact)
                {
                    DockPanel dock_panel = tab_item.Content as DockPanel;

                    Label status_label = dock_panel.Children[1] as Label;
                    status_label.Content = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(contact.Substring(4, contact.IndexOf('@') - 4)) + " is typing";
                }
            }
        }

        void IM_Message_Status_Event(object sender, IM_Handler.Typing_Message_Recieved_Args e)
        {
            Update_IM_Message_Status_Handler handler = new Update_IM_Message_Status_Handler(Update_IM_Message_Status);
            Dispatcher.BeginInvoke(DispatcherPriority.Render, handler, e.contact, e.message);
        }

        bool Message_Tab_Exists(string uri)
        {
            foreach (TabItem tab_item in my_im_window.IM_TabControl.Items)
            {
                if (tab_item.Tag.ToString() == uri)
                {
                    return true;
                }
            }
            return false;
        }

        void Create_Message_Tab(string uri)
        {
            TabItem tab_item = new TabItem();
            DockPanel overall_dock_panel = new DockPanel();
            DockPanel send_dock_panel = new DockPanel();
            TextBox text_box = new TextBox();
            text_box.VerticalAlignment = VerticalAlignment.Stretch;
            text_box.VerticalContentAlignment = VerticalAlignment.Center;
            text_box.TextChanged += new TextChangedEventHandler(Send_IM_TextChanged);
            text_box.Tag = uri;

            RichTextBox conversation_box = new RichTextBox();

            FlowDocument conversation_flow_doc = new FlowDocument();
            conversation_box.Document = conversation_flow_doc;

            ImageButton image_button = new ImageButton();
            image_button.ImageOver = "Status_Images/available.png";
            image_button.ImageDown = "Status_Images/Offline.png";
            image_button.ImageNormal = "Status_Images/Unknown.png";
            image_button.Text = "Send";
            image_button.Style = (Style)FindResource("Image_Button_With_text");
            image_button.Width = 60;
            image_button.Height = 30;
            image_button.Click += new RoutedEventHandler(Send_IM_Button_Clicked);
            image_button.Tag = uri;

            conversation_box.VerticalAlignment = VerticalAlignment.Stretch;
            conversation_box.HorizontalAlignment = HorizontalAlignment.Stretch;
            conversation_box.Background = Brushes.White;
            conversation_box.IsReadOnly = true;


            Border border = new Border();
            border.Style = (Style)FindResource("MainBorder");
            border.Child = image_button;

            send_dock_panel.Children.Add(border);
            send_dock_panel.Children.Add(text_box);


            Label status_label = new Label();
            status_label.Content = "";


            DockPanel.SetDock(send_dock_panel, Dock.Bottom);
            DockPanel.SetDock(image_button, Dock.Right);
            DockPanel.SetDock(text_box, Dock.Left);
            DockPanel.SetDock(status_label, Dock.Bottom);
            DockPanel.SetDock(conversation_box, Dock.Top);




            overall_dock_panel.Children.Add(send_dock_panel);
            overall_dock_panel.Children.Add(status_label);
            overall_dock_panel.Children.Add(conversation_box);

            tab_item.Content = overall_dock_panel;
            tab_item.Header = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(uri.Substring(4, uri.IndexOf('@') - 4));

            tab_item.Tag = uri;

            my_im_window.IM_TabControl.Items.Add(tab_item);
        }

        void Send_IM_TextChanged(object sender, TextChangedEventArgs e)
        {
            TextBox text_box = sender as TextBox;
            if (text_box.Text != "")
            {
                im_handler.Send_Typing_Notice(text_box.Tag.ToString());
            }
        }

        void Send_Message_menu_item_Click(object sender, RoutedEventArgs e)
        {
            MenuItem mi = sender as MenuItem;
            if (!Message_Tab_Exists(mi.Tag.ToString()))
            {
                Create_Message_Tab(mi.Tag.ToString());
            }
            my_im_window.Show();
        }

        void Send_IM_Button_Clicked(object sender, RoutedEventArgs e)
        {
            ImageButton img_button = sender as ImageButton;
            TabItem conversation_tab = null;
            foreach (TabItem tab_item in my_im_window.IM_TabControl.Items)
            {
                if (tab_item.Tag.ToString() == img_button.Tag.ToString())
                {
                    conversation_tab = tab_item;
                }
            }

            DockPanel dock_panel = conversation_tab.Content as DockPanel;
            DockPanel send_panel = dock_panel.Children[0] as DockPanel;
            TextBox text_box = send_panel.Children[1] as TextBox;

            string message = text_box.Text;
            text_box.Text = "";

            im_handler.Send_Message(img_button.Tag.ToString(), message);

            RichTextBox rich_text_box = dock_panel.Children[2] as RichTextBox;
            FlowDocument flow_doc = rich_text_box.Document;

            Paragraph para = new Paragraph();
            Span username = new Span();
            username.Foreground = Brushes.Green;
            username.Inlines.Add(CultureInfo.CurrentCulture.TextInfo.ToTitleCase(settings.ims_public_user_identity.Substring(4, settings.ims_public_user_identity.IndexOf('@') - 4)) + ": ");
            
            para.Inlines.Add(username);

            para.Inlines.Add(message);
            flow_doc.Blocks.Add(para);
            
        }

        #endregion

        #region Settings
        private Preferences Load_Settings_from_Xml(string filename)
        {
            Preferences settings = null;
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(Preferences));
                XmlReader reader = XmlReader.Create(filename);
                settings = (Preferences)serializer.Deserialize(reader);
                reader.Close();
            }
            catch (Exception e)
            {
                MessageBox.Show("There was a problem reading the configuration file, settings.xml:" + e.Message);
            }
            return settings;
        }

        private void Save_Settings_to_Xml(string filename, Preferences settings)
        {
            try
            {
                XmlSerializer serializer = new XmlSerializer(typeof(Preferences));
                TextWriter writer = new StreamWriter(filename);
                serializer.Serialize(writer, settings);
                writer.Close();
            }
            catch (Exception e)
            {
                MessageBox.Show("Error in saving settings: " + e.Message);
                MessageBox.Show("Base Exception: " + e.GetBaseException());
            }
        }

        private void Settings_Click(object sender, RoutedEventArgs e)
        {
            Settings_window my_settings_window = new Settings_window();
            my_settings_window.SizeToContent = SizeToContent.WidthAndHeight;

            TabControl options_tab_control = my_settings_window.Options_tab_control;

            PropertyInfo[] properties = null;
            properties = typeof(Preferences).GetProperties();


            if (settings != null)
            {
                Dictionary<string, int> dict_counter = new Dictionary<string, int>();

                foreach (string section in settings.option_sections)
                {
                    dict_counter.Add(section.ToLower(), 0);
                    TabItem section_tab_item = new TabItem();
                    section_tab_item.Name = section.ToLower();
                    section_tab_item.Header = section;

                    DockPanel dock = new DockPanel();
                    Grid options_grid = new Grid();

                    options_grid.HorizontalAlignment = HorizontalAlignment.Stretch;
                    options_grid.VerticalAlignment = VerticalAlignment.Stretch;

                    ColumnDefinition coldef = new ColumnDefinition();
                    //coldef.Width = GridLength.;
                    options_grid.ColumnDefinitions.Add(coldef);
                    coldef = new ColumnDefinition();
                    //coldef.Width = GridLength.Auto;
                    options_grid.ColumnDefinitions.Add(coldef);
                    dock.Children.Add(options_grid);

                    section_tab_item.Content = dock;
                    options_tab_control.Items.Add(section_tab_item);
                }
                Binding myBinding = null;

                foreach (PropertyInfo prop_info in properties)
                {
                    RowDefinition rowdef = new RowDefinition();
                    //rowdef.Height = GridLength.Auto;
                    string section = prop_info.Name.Remove(prop_info.Name.ToString().IndexOf('_'));
                    Grid options_grid = null;
                    foreach (TabItem tab_item in options_tab_control.Items)
                    {
                        if (tab_item.Name.ToLower() == section)
                        {
                            DockPanel dock = tab_item.Content as DockPanel;
                            options_grid = dock.Children[0] as Grid;
                        }
                    }


                    options_grid.RowDefinitions.Add(rowdef);

                    UIElement new_control = Add_Settings_Item(prop_info.Name);
                    if (new_control != null)
                    {
                        TextBlock name = new TextBlock();

                        string option_name = prop_info.Name.Remove(0, section.Length + 1);
                        option_name = option_name.Replace("_", " ");
                        CultureInfo cultureInfo = Thread.CurrentThread.CurrentCulture;
                        TextInfo textInfo = cultureInfo.TextInfo;

                        name.Text = textInfo.ToTitleCase(option_name);
                        name.Margin = new Thickness(2);

                        //name.HorizontalContentAlignment = HorizontalAlignment.Center;
                        name.HorizontalAlignment = HorizontalAlignment.Center;
                        //name.VerticalContentAlignment = VerticalAlignment.Center;
                        name.VerticalAlignment = VerticalAlignment.Center;

                        options_grid.Children.Add(new_control);
                        options_grid.Children.Add(name);

                        Grid.SetColumn(new_control, 1);
                        Grid.SetRow(new_control, dict_counter[section]);

                        Grid.SetColumn(name, 0);
                        Grid.SetRow(name, dict_counter[section]);
                        dict_counter[section] = dict_counter[section] + 1;
                    }
                }
            }
            my_settings_window.Show();
            my_settings_window.SizeToContent = SizeToContent.Manual;
            my_settings_window.Closed += new EventHandler(Settings_window_Closed);
        }

        private UIElement Add_Settings_Item(string property_name)
        {
            Binding myBinding = new Binding(property_name);
            myBinding.Source = settings;

            if (settings.setting_item_types.ContainsKey(property_name))
            {
                switch (settings.setting_item_types[property_name])
                {
                    case "checkbox":
                        CheckBox checkbox = new CheckBox();
                        checkbox.SetBinding(CheckBox.IsCheckedProperty, myBinding);
                        checkbox.MaxHeight = 30;
                        checkbox.MaxWidth = 200;
                        checkbox.HorizontalContentAlignment = HorizontalAlignment.Center;
                        checkbox.HorizontalAlignment = HorizontalAlignment.Stretch;
                        checkbox.VerticalContentAlignment = VerticalAlignment.Center;
                        checkbox.VerticalAlignment = VerticalAlignment.Stretch;
                        return checkbox;
                    case "audio_codec_choice":
                    //CheckBox checkbox = new CheckBox();
                    //checkbox.SetBinding(CheckBox.IsCheckedProperty, myBinding);
                    //checkbox.MaxHeight = 30;
                    //checkbox.MaxWidth = 200;
                    //checkbox.HorizontalContentAlignment = HorizontalAlignment.Center;
                    //checkbox.HorizontalAlignment = HorizontalAlignment.Stretch;
                    //checkbox.VerticalContentAlignment = VerticalAlignment.Center;
                    //checkbox.VerticalAlignment = VerticalAlignment.Stretch;
                    //return checkbox;

                    case "hidden":
                        return null;
                    default:
                        TextBox textbox = new TextBox();
                        textbox.SetBinding(TextBox.TextProperty, myBinding);
                        textbox.MaxHeight = 30;
                        textbox.MaxWidth = 200;
                        textbox.HorizontalContentAlignment = HorizontalAlignment.Center;
                        textbox.HorizontalAlignment = HorizontalAlignment.Stretch;
                        textbox.VerticalContentAlignment = VerticalAlignment.Center;
                        textbox.VerticalAlignment = VerticalAlignment.Stretch;
                        return textbox;
                }
            }
            else
            {
                TextBox textbox = new TextBox();
                textbox.SetBinding(TextBox.TextProperty, myBinding);
                textbox.MaxHeight = 30;
                textbox.MaxWidth = 200;
                textbox.HorizontalContentAlignment = HorizontalAlignment.Center;
                textbox.HorizontalAlignment = HorizontalAlignment.Stretch;
                textbox.VerticalContentAlignment = VerticalAlignment.Center;
                textbox.VerticalAlignment = VerticalAlignment.Stretch;
                return textbox;
            }
        }

        #endregion

        #region General_Stack
        void my_user_agent_IncomingCall(object sender, SipMessage message)
        {
            //    if (!call_handler.in_call)
            //    {
            //        call_handler.incoming_call = e.Call;
            //        //call_handler.SetState(SIP_UA_CallState.WaitingToAccept);
            //        Update_Status_Text("Incoming Call");
            //        sound_player.Dispatcher.Invoke(
            //            System.Windows.Threading.DispatcherPriority.Normal,
            //            new Action(
            //                delegate()
            //                {
            //                    sound_player.Open(new Uri("Resources/ctu24ringtone.mp3", UriKind.Relative));
            //                    sound_player.MediaEnded += new EventHandler(sound_player_MediaEnded);
            //                    sound_player.Play();
            //                }));
            //    }
            //    else
            //    {

            //    }
        }

        #endregion

        private void Answer_Call_Click(object sender, RoutedEventArgs e)
        {
            sound_player.Dispatcher.Invoke(
                 System.Windows.Threading.DispatcherPriority.Normal,
                 new Action(
                     delegate()
                     {
                         sound_player.Stop();
                     }));
            call_handler.Receive_Call();
        }

        private void Cancel_Call_Click(object sender, RoutedEventArgs e)
        {
            sound_player.Dispatcher.Invoke(
                 System.Windows.Threading.DispatcherPriority.Normal,
                 new Action(
                     delegate()
                     {
                         sound_player.Stop();
                     }));
            call_handler.Cancel_call(null);
        }

    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using Gst;
using Gst.GLib;
using System.Windows.Forms.Integration;

namespace IMS_client
{


    public class GstMessageEventArgs : EventArgs
    {
        public string type;
        public string message;

        public GstMessageEventArgs(string type, string message)
        {
            this.type = type;
            this.message = message;
        }
    }

    class Multimedia_Handler
    {
        public event EventHandler<GstMessageEventArgs> Gst_Log_Event;
        Preferences settings;

        Element video_tx_pipeline, video_rx_pipeline, audio_tx_pipeline, audio_rx_pipeline;
        MainLoop loop;
        public Video_Window video_window;

        public Multimedia_Handler(Preferences Settings)
        {

            settings = Settings;
            //System.Environment.SetEnvironmentVariable("GST_DEBUG", "*:3");
            //System.Environment.SetEnvironmentVariable("GST_PLUGIN_PATH",  System.Environment.CurrentDirectory + "\\Resources\\Gstreamer\\Gst_plugins");
            //System.Environment.SetEnvironmentVariable("PATH",System.Environment.CurrentDirectory + "\\Resources\\Gstreamer;"+System.Environment.GetEnvironmentVariable("PATH"));

            //string[] args2 = { "--gst-debug-level=*:3" };

            //Gst.Application.Init("Sharp_Client", ref args2);
            Gst.Application.Init();
            System.Threading.Thread glib_loop_thread;

            glib_loop_thread = new System.Threading.Thread(this.Glib_Loop);
            glib_loop_thread.Start();

            video_window = new Video_Window();
        }


        public void Glib_Loop()
        {
            loop = new MainLoop();
            loop.Run();
        }

        public void Start_Video_Rx(int recv_port,string name)
        {
            Element udp_src, rtp_h263_depayloader, h263_decoder, csp_filter, screen_sink;
            Caps caps;

            video_rx_pipeline = new Pipeline("videorx-pipeline");
            Bin bin = (Bin)video_rx_pipeline;
            //bin.Bus.AddWatch(new BusFunc(BusCall));
            video_rx_pipeline.Bus.AddSignalWatch();
            video_rx_pipeline.Bus.Message += delegate(object o, MessageArgs args)
            { BusCall(o, args.Message); };

            udp_src = ElementFactory.Make("udpsrc", "udp_src");
            rtp_h263_depayloader = ElementFactory.Make("rtph263pdepay", "h263_deplayloader");
            h263_decoder = ElementFactory.Make("ffdec_h263", "h263_decoder");
            csp_filter = ElementFactory.Make("ffmpegcolorspace", "csp_filter");

            screen_sink = ElementFactory.Make("dshowvideosink", "video-sink");

            if ((video_rx_pipeline == null) || (udp_src == null) || (rtp_h263_depayloader == null) || (h263_decoder == null) || (csp_filter == null) || (screen_sink == null))
            {
                MessageBox.Show("Error Creating Gstreamer Elements for Recieving Video!");
            }
            udp_src["port"] = recv_port;

            bin.Add(udp_src, rtp_h263_depayloader, h263_decoder, csp_filter, screen_sink);
            caps = Gst.Caps.FromString("application/x-rtp,clock-rate=90000,payload=96,encoding-name=H263-1998");

            if (!udp_src.LinkFiltered(rtp_h263_depayloader, caps))
            {
                Console.WriteLine("link failed between udp_src and rtp_h263_depayloader");
            }

            if (!Gst.Element.Link(rtp_h263_depayloader, h263_decoder, csp_filter, screen_sink))
            {
                Console.WriteLine("link failed between rtp_h263_depayloader and screen_sink");
            }

            Gst.Interfaces.XOverlayAdapter xadapter = new Gst.Interfaces.XOverlayAdapter(screen_sink.Handle);
            
            video_window.wfhost2.Dispatcher.Invoke(
                    System.Windows.Threading.DispatcherPriority.Normal,
                    new Action(
                        delegate()
                        {
                            video_window.remote_video_label.Content = "Remote Video:" + name;
                            xadapter.XwindowId = (ulong)video_window.video_rx_canvas.Handle;
                        }));

            video_rx_pipeline.SetState(State.Playing);
        }

        public void Start_Video_Tx(string dest_ip, int dest_port)
        {

            Element camera_src, screen_sink;
            Element csp_filter, csp_filter2, tee;
            Element h263_encoder, rtp_h263_payloader, udp_sink, udp_queue, screen_queue;
            Caps caps;

            video_tx_pipeline = new Pipeline("videotx-pipeline");
            Bin bin = (Bin)video_tx_pipeline;
            //bin.Bus.AddWatch(new BusFunc(BusCall));
            video_tx_pipeline.Bus.AddSignalWatch();
            video_tx_pipeline.Bus.Message += delegate(object o, MessageArgs args)
            { BusCall(o, args.Message); };


            if ((camera_src = ElementFactory.Make("videotestsrc", "web-cam")) == null)
            {
                Console.WriteLine("Could not create webcam-source");
            }

            csp_filter = ElementFactory.Make("ffmpegcolorspace", "filter");
            csp_filter2 = ElementFactory.Make("ffmpegcolorspace", "filter2");
            screen_sink = ElementFactory.Make("dshowvideosink", "video-sink");
            tee = ElementFactory.Make("tee", "tee");

            screen_queue = ElementFactory.Make("queue", "screen-queue");
            udp_queue = ElementFactory.Make("queue", "udp-queue");

            h263_encoder = ElementFactory.Make("ffenc_h263p", "ffenc_h263p");
            rtp_h263_payloader = ElementFactory.Make("rtph263ppay", "rtp_payloader");
            udp_sink = ElementFactory.Make("udpsink", "udp_sink");

            if ((video_tx_pipeline == null) || (camera_src == null) || (screen_sink == null) || (csp_filter == null) || (csp_filter2 == null) || (h263_encoder == null) ||
                (rtp_h263_payloader == null) || (udp_sink == null) || (udp_queue == null) || (screen_queue == null))
            {
                MessageBox.Show("Error Creating Gstreamer Elements!");
            }
            udp_sink["host"] = dest_ip;
            udp_sink["port"] = dest_port;

            bin.Add(camera_src, screen_sink, csp_filter, csp_filter2, tee, h263_encoder, rtp_h263_payloader, udp_sink, udp_queue, screen_queue);
            caps = Gst.Caps.FromString("video/x-raw-rgb,width=" + settings.videocall_width + ",height=" + settings.videocall_height);

            if (!camera_src.LinkFiltered(tee, caps))
            {
                Console.WriteLine("link failed between camera_src and tee");
            }

            if (!Gst.Element.Link(tee, csp_filter, screen_queue, screen_sink))
            {
                Console.WriteLine("link failed between tee and screen_sink");
            }

            if (!Gst.Element.Link(tee, csp_filter2, udp_queue, h263_encoder, rtp_h263_payloader, udp_sink))
            {
                Console.WriteLine("link failed between tee and udp_sink");
            }

            Gst.Interfaces.XOverlayAdapter xadapter = new Gst.Interfaces.XOverlayAdapter(screen_sink.Handle);
            
            video_window.wfhost1.Dispatcher.Invoke(
                    System.Windows.Threading.DispatcherPriority.Normal,
                    new Action(
                        delegate()
                        {
                            video_window.local_video_label.Content = "Local Video: " + settings.ims_public_user_identity;
                            xadapter.XwindowId = (ulong)video_window.video_tx_canvas.Handle;
                        }));

            video_tx_pipeline.SetState(State.Playing);
            video_window.Dispatcher.Invoke(
                    System.Windows.Threading.DispatcherPriority.Normal,
                    new Action(
                        delegate()
                        {
                            video_window.Show();
                        }));
        }

        public void Start_Audio_Tx(string dest_ip, int dest_port, int codec)
        {
            Element ds_src, audio_convert, audio_resample, encoder, payloader, udp_sink;
            Caps caps;
            string encoder_name, payloader_name;
            switch (codec)
            {
                case 0:
                    encoder_name = "mulawenc";
                    payloader_name = "rtppcmupay";
                    break;
                case 3:
                    encoder_name = "gsmenc";
                    payloader_name = "rtpgsmpay";
                    break;
                case 8:
                    encoder_name = "alawenc";
                    payloader_name = "rtppcmapay";
                    break;
                case 14:
                    encoder_name = "ffenc_mp2";
                    payloader_name = "rtpmpapay";
                    break;
                default:
                    encoder_name = "mulawenc";
                    payloader_name = "rtppcmupay";
                    break;
            }

            audio_tx_pipeline = new Pipeline("audiotx-pipeline");
            Bin bin = (Bin)audio_tx_pipeline;
            //bin.Bus.AddWatch(new BusFunc(BusCall));
            audio_tx_pipeline.Bus.AddSignalWatch();
            audio_tx_pipeline.Bus.Message += delegate(object o, MessageArgs args)
            { BusCall(o, args.Message); };

            //ds_src = ElementFactory.Make("dshowaudiosrc", "dshow-audio-in");
            ds_src = ElementFactory.Make("audiotestsrc", "dshow-audio-in");
            audio_convert = ElementFactory.Make("audioconvert", "audio_convert");
            audio_resample = ElementFactory.Make("audioresample", "audio_resample");
            encoder = ElementFactory.Make(encoder_name, encoder_name);

            payloader = ElementFactory.Make(payloader_name, payloader_name);
            udp_sink = ElementFactory.Make("udpsink", "udp_sink");

            if ((ds_src == null) || (audio_convert == null) || (audio_resample == null) || (encoder == null) || (payloader == null) || (udp_sink == null))
            {
                MessageBox.Show("Error Creating Gstreamer Elements for Audio Tx pipeline!");
            }

            udp_sink["host"] = dest_ip;
            udp_sink["port"] = dest_port;

            bin.Add(ds_src, audio_convert, audio_resample, encoder, payloader, udp_sink);


            if (!Gst.Element.Link(ds_src, audio_convert, audio_resample, encoder, payloader, udp_sink))
            {
                Console.WriteLine("link failed between ds_src and udp_sink");
            }

            audio_tx_pipeline.SetState(State.Playing);
        }

        public void Start_Audio_Rx(int recv_port, int codec)
        {
            Element udp_src, depayloader, decoder, directsoundsink;
            Element audioresample, audioconvert;
            Caps caps;
            string depayloader_name, decoder_name;
            switch (codec)
            {
                case 0:
                    depayloader_name = "rtppcmudepay";
                    decoder_name = "mulawdec";
                    caps = Gst.Caps.FromString("application/x-rtp,clock-rate=8000,payload=0");
                    break;
                case 3:
                    depayloader_name = "rtpgsmdepay";
                    decoder_name = "gsmdec";
                    caps = Gst.Caps.FromString("application/x-rtp,clock-rate=8000,payload=3");
                    break;
                case 8:
                    depayloader_name = "rtppcmadepay";
                    decoder_name = "alawdec";
                    caps = Gst.Caps.FromString("application/x-rtp,clock-rate=8000,payload=8");
                    break;
                case 14:
                    depayloader_name = "rtpmpadepay";
                    decoder_name = "mad";
                    caps = Gst.Caps.FromString("application/x-rtp,media=(string)audio,clock-rate=(int)90000,encoding-name=(string)MPA,payload=(int)96");
                    break;
                default:
                    depayloader_name = "rtppcmudepay";
                    decoder_name = "mulawdec";
                    caps = Gst.Caps.FromString("application/x-rtp,clock-rate=8000,payload=0");
                    break;
            }

            audio_rx_pipeline = new Pipeline("audiorx-pipeline");
            Bin bin = (Bin)audio_rx_pipeline;
            //bin.Bus.AddWatch(new BusFunc(BusCall));
            audio_rx_pipeline.Bus.AddSignalWatch();
            audio_rx_pipeline.Bus.Message += delegate(object o, MessageArgs args)
            { BusCall(o, args.Message); };


            udp_src = ElementFactory.Make("udpsrc", "udp_src");
            depayloader = ElementFactory.Make(depayloader_name, depayloader_name);
            decoder = ElementFactory.Make(decoder_name, decoder_name);
            audioconvert = ElementFactory.Make("audioconvert", "audioconvert");
            audioresample = ElementFactory.Make("audioresample", "audio_resample");
            directsoundsink = ElementFactory.Make("directsoundsink", "directsoundsink");

            if ((udp_src == null) || (depayloader == null) || (decoder == null) || (audioconvert == null) || (audioresample == null) || (directsoundsink == null))
            {
                MessageBox.Show("Error Creating Gstreamer Elements for Audio Rx pipeline!");
            }


            udp_src["port"] = recv_port;

            bin.Add(udp_src, depayloader, decoder, audioconvert, audioresample, directsoundsink);

            if (!udp_src.LinkFiltered(depayloader, caps))
            {
                Console.WriteLine("link failed between camera_src and tee");
            }


            if (!Gst.Element.Link(depayloader, decoder, audioconvert, audioresample, directsoundsink))
            {
                Console.WriteLine("link failed between udp_src and directsoundsink");
            }

            audio_rx_pipeline.SetState(State.Playing);

        }

        private bool BusCall(object o, Message message)
        {
            if (this.Gst_Log_Event != null)
            {
                GstMessageEventArgs eventargs = new GstMessageEventArgs("type", "message");
                string msg;
                Enum err;
                eventargs.type = message.Type.ToString();
                switch (message.Type)
                {
                    case MessageType.Error:
                        message.ParseError(out err, out msg);
                        eventargs.message = message.Src.Name + ":\n" + err + "\n" + msg;
                        break;
                    case MessageType.Eos:
                        eventargs.message = message.Src.Name + ":\n" + "End of stream reached";
                        break;
                    case MessageType.Warning:
                        message.ParseWarning(out err, out msg);
                        eventargs.message = message.Src.Name + ":\n" + err + "\n" + msg;
                        break;
                    default:
                        eventargs.message = message.Src.Name + ":\n" + "Entered bus call " + message.Type;
                        break;
                }
                this.Gst_Log_Event(this, eventargs);
            }
            return true;
        }

        public void Stop_Video_Tx()
        {
            if (video_tx_pipeline != null)
            {
                video_tx_pipeline.SetState(State.Null);
                video_tx_pipeline.Dispose();
            }
        }

        public void Stop_Video_Rx()
        {
            if (video_rx_pipeline != null)
            {
                video_rx_pipeline.SetState(State.Null);
                video_rx_pipeline.Dispose();
            }
        }

        public void Stop_Audio_Tx()
        {
            if (audio_tx_pipeline != null)
            {
                audio_tx_pipeline.SetState(State.Null);
                audio_tx_pipeline.Dispose();
            }
        }

        public void Stop_Audio_Rx()
        {
            if (audio_rx_pipeline != null)
            {
                audio_rx_pipeline.SetState(State.Null);
                audio_rx_pipeline.Dispose();
            }
        }


        internal void Stop_Loop()
        {
            loop.Quit();
        }
    }
}
﻿using System.Collections.Generic;
using System.Xml.Serialization;

namespace IMS_client
{
    public class Preferences
    {
        public string ims_proxy_cscf_hostname { get; set; }
        public int    ims_proxy_cscf_port { get; set; }
        public string ims_realm { get; set; }
        public string ims_public_user_identity { get; set; }
        public string ims_private_user_identity { get; set; }
        public string ims_password { get; set; }
        public string ims_ip_address { get; set; }
        public int    ims_port { get; set; }
        public bool   ims_use_detected_ip { get; set; }
        public string ims_service_route { get; set; }

        public bool   presence_enabled { get; set; }

        public bool   xdms_enabled { get; set; }
        public string xdms_user_name { get; set; }
        public string xdms_password { get; set; }
        public string xdms_server_name { get; set; }
        public int    xdms_server_port { get; set; }
        
        public int videocall_height { get; set; }
        public int videocall_width { get; set; }
        public int videocall_fps { get; set; }
        public int videocall_local_port { get; set; }

        public int audiocall_local_port { get; set; }

        [XmlIgnore]
        public List<string> option_sections;

        [XmlIgnore]
        public Dictionary<string, string> setting_item_types;

        public Preferences()
        {
            Initialise_Variables();
        }

        public Preferences(string PCSCF_hostname,int PCSCF_port,string Realm,string Public_Id,string Private_Id,string Password,bool Presence_enabled)
        {
            Initialise_Variables();

            ims_proxy_cscf_hostname = PCSCF_hostname;
            ims_proxy_cscf_port = PCSCF_port;
            ims_realm = Realm;
            ims_public_user_identity = Public_Id;
            ims_private_user_identity = Private_Id;
            ims_password = Password;
            presence_enabled = Presence_enabled;
        }

        private void Initialise_Variables()
        {
            option_sections = new List<string>();
            option_sections.Add("IMS");
            option_sections.Add("Presence");
            option_sections.Add("XDMS");
            option_sections.Add("VideoCall");
            option_sections.Add("AudioCall");

            ims_proxy_cscf_hostname = "pcscf.open-ims.test";
            ims_proxy_cscf_port = 4060;
            ims_port = 5060;
            ims_realm = "open-ims.test";
            ims_public_user_identity = "sip:alice@open-ims.test";
            ims_private_user_identity = "alice@open-ims.test";
            ims_password = "alice";
            presence_enabled = false;
            xdms_enabled = false;
            ims_ip_address = "127.0.0.1";
            ims_use_detected_ip = true;

            videocall_fps = 30;
            videocall_width = 320;
            videocall_height = 240;
            
            setting_item_types = new Dictionary<string, string>();
            setting_item_types.Add("presence_enabled", "checkbox");
            setting_item_types.Add("xdms_enabled", "checkbox");
            setting_item_types.Add("ims_use_detected_ip", "checkbox");
            setting_item_types.Add("ims_service_route", "hidden");
            setting_item_types.Add("audiocall_first_codec", "audio_codec_choice");
            setting_item_types.Add("audiocall_second_codec", "audio_codec_choice");
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Xml.Linq;
using SipStack;

namespace IMS_client
{
    class Presence_Handler
    {

        public class PresenceChangedArgs : EventArgs
        {
            public string contact;
            public string basis;
            public string note;

            public PresenceChangedArgs(string Contact, string Basis, string Note)
            {
                contact = Contact;
                basis = Basis;
                note = Note;
            }
        }

        ClientSipStack stack;
        Preferences settings;

        public event EventHandler<SipMessageEventArgs> Presence_Response_Event;
        public event EventHandler<PresenceChangedArgs> Presence_Changed_Event;

        public Presence_Handler(ClientSipStack Stack, Preferences Settings)
        {
            stack = Stack;
            settings = Settings;
        }

        public void Subscribe(string sip_uri)
        {
            
            SipMessage request = new SipMessage();
            request.set_request_line("SUBSCRIBE", sip_uri);
            request.headers["Event"] = "presence";
            request.headers["CSeq"] = "1" + " SUBSCRIBE";
            request.headers["To"] = SipUtilities.sip_tag(sip_uri.Replace("sip:",""));
            request.headers["From"] = SipUtilities.sip_tag(settings.ims_private_user_identity) + ";tag=" + SipUtilities.CreateTag();
            stack.SendMessage(request);
        }
        /*
         * 


         */

        public void Process_Request(SipMessage request)
        {
            if (request.method.ToUpper().Contains("NOTIFY"))
            {
                SipMessage reply = stack.CreateResponse(SipResponseCodes.x200_Ok, request);
                stack.SendMessage(reply);
                if (request.headers.ContainsKey("Content-Length"))
                {
                    if (int.Parse(request.headers["Content-Length"]) != 0)
                    {
                        try
                        {
                            XDocument x_doc = XDocument.Parse(request.message_body.Trim());
                            XName xname = x_doc.Root.Name;
                            string basic = "";
                            string note = "";
                            foreach (XElement x_element in x_doc.Descendants())
                            {
                                switch (x_element.Name.ToString())
                                {
                                    case "{urn:ietf:params:xml:ns:pidf}basic":
                                        basic = x_element.Value;
                                        break;

                                    case "{urn:ietf:params:xml:ns:pidf}note":
                                        note = x_element.Value;
                                        break;
                                    default:
                                        break;
                                }
                            }

                            if (this.Presence_Changed_Event != null)
                            {
                                this.Presence_Changed_Event(this, new PresenceChangedArgs(SipUtilities.GetSipUri(request.headers["From"]), basic, note));
                            }
                        }
                        catch (Exception exception)
                        {
                            MessageBox.Show("Error in handling presence xml: " + exception.Message);
                        }
                    }

                }

            }
        }

        public void Publish(string sip_uri, string basic, string note,int expires)
        {
            SipMessage request = new SipMessage();
            request.set_request_line("PUBLISH", sip_uri);
            request.headers["Event"] = "presence";
            request.headers["P-Preferred-Identity"] = "<" + settings.ims_public_user_identity + ">";
            request.headers["From"] = SipUtilities.sip_tag(settings.ims_private_user_identity) + ";tag=" + SipUtilities.CreateTag();
            request.headers["To"] = SipUtilities.sip_tag(sip_uri.Replace("sip:", ""));
            request.headers["CSeq"] = "21" + " PUBLISH";
            request.headers["Content-Type"] = "application/pidf+xml";
            
            StringBuilder sb = new StringBuilder();
            sb.Append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
            sb.Append("<presence xmlns=\"urn:ietf:params:xml:ns:pidf\" xmlns:im=\"urn:ietf:params:xml:ns:pidf:im\" entity=\"" + sip_uri + "\">\n");
            sb.Append("<tuple id=\"Sharp_IMS_Client\">\n");
            sb.Append("<status>\n");
            sb.Append("<basic>" + basic + "</basic>\n");
            sb.Append("</status>\n");
            sb.Append("<note>" + note + "</note>\n");
            sb.Append("</tuple>\n");
            sb.Append("</presence>\n");
            request.message_body = sb.ToString();
            stack.SendMessage(request);
            
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace IMS_client
{
    /// <summary>
    /// Interaction logic for Settings_window.xaml
    /// </summary>
    public partial class Settings_window : Window
    {
        public Settings_window()
        {
            InitializeComponent();
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ComponentModel;

namespace IMS_client
{
    public class Status : INotifyPropertyChanged
    {
        private string _basic;
        private string _note;
        private string _display_name;

        public string basic { get { return _basic; } set { 
            _basic = value;
            OnPropertyChanged("basic"); } }
        public string note
        {
            get { return _note; }
            set
            {
                _note = value;
                OnPropertyChanged("note");
            }
        }
        public string display_name
        {
            get { return _display_name; }
            set
            {
                _display_name = value;
                OnPropertyChanged("display_name");
            }
        }

        public Status()
        {
            basic="nothing_yet ";
            note = "nothing_yet ";
            display_name = "nothing_yet ";

        }

        public  Status(string Basic, string Note,string Display_name)
        {
            basic = Basic;
            note = Note;
            display_name = Display_name;
        }

        public event PropertyChangedEventHandler PropertyChanged;                
          protected void OnPropertyChanged(string propertyName)                    
          {
              if (this.PropertyChanged != null)                                    
                 PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
         }                                                                     
        
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Media;
using System.Windows.Data;
using System.Globalization;
using System.Windows.Media.Imaging;

namespace IMS_client
{
    [ValueConversion(typeof(string), typeof(ImageSource))]
    public class Status_Converter : IValueConverter
    {

        public object Convert(object value, Type targetType,
            object parameter, CultureInfo culture)
        {
            BitmapImage myBitmapImage = new BitmapImage();

                    try
                    {
                        String toConvert = (String)value;
                        string image_name = "";
                        switch (toConvert)
                        {   
                            case "open":
                                image_name = "Resources/Status_Images/available.png";
                                break;
                            case "closed":
                                image_name = "Resources/Status_Images/Offline.png";
                                break;
                            default:
                                image_name = "Resources/Status_Images/Unknown.png";
                                break;
                        }
                        myBitmapImage.BeginInit();
                        myBitmapImage.UriSource = new Uri(image_name, UriKind.Relative);
                        myBitmapImage.DecodePixelWidth = 50;
                        myBitmapImage.EndInit();
                        

                        return myBitmapImage;
                    }
                    catch (Exception exception)
                    {
                        myBitmapImage = new System.Windows.Media.Imaging.BitmapImage();
                    }
                    return myBitmapImage;
        }

        public object ConvertBack(object value, Type targetType,
            object parameter, CultureInfo culture)
        {
            return null;
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Input;
using System.Windows;


using System.Windows.Controls;
using System.Windows.Shapes;
using System.Windows.Interop;
using System.Runtime.InteropServices;

using System.Windows.Media;
using System.Collections;

namespace IMS_client
{
    public partial class Style_Window
    {
        #region sizing event handlers

        void OnSizeSouth(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            Window wnd = ((FrameworkElement)sender).TemplatedParent as Window;
            if (wnd != null)
            {
                WindowInteropHelper helper = new WindowInteropHelper(wnd);
                DragSize(helper.Handle, SizingAction.South);
            }
        }

        void OnSizeNorth(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            Window wnd = ((FrameworkElement)sender).TemplatedParent as Window;
            if (wnd != null)
            {
                WindowInteropHelper helper = new WindowInteropHelper(wnd);
                DragSize(helper.Handle, SizingAction.North);
            }
        }

        void OnSizeEast(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            Window wnd = ((FrameworkElement)sender).TemplatedParent as Window;
            if (wnd != null)
            {
                WindowInteropHelper helper = new WindowInteropHelper(wnd);
                DragSize(helper.Handle, SizingAction.East);
            }
        }

        void OnSizeWest(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            Window wnd = ((FrameworkElement)sender).TemplatedParent as Window;
            if (wnd != null)
            {
                WindowInteropHelper helper = new WindowInteropHelper(wnd);
                DragSize(helper.Handle, SizingAction.West);
            }
        }

        void OnSizeNorthWest(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            Window wnd = ((FrameworkElement)sender).TemplatedParent as Window;
            if (wnd != null)
            {
                WindowInteropHelper helper = new WindowInteropHelper(wnd);
                DragSize(helper.Handle, SizingAction.NorthWest);
            }
        }

        void OnSizeNorthEast(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            Window wnd = ((FrameworkElement)sender).TemplatedParent as Window;
            if (wnd != null)
            {
                WindowInteropHelper helper = new WindowInteropHelper(wnd);
                DragSize(helper.Handle, SizingAction.NorthEast);
            }
        }

        void OnSizeSouthEast(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            Window wnd = ((FrameworkElement)sender).TemplatedParent as Window;
            if (wnd != null)
            {
                WindowInteropHelper helper = new WindowInteropHelper(wnd);
                DragSize(helper.Handle, SizingAction.SouthEast);
            }
        }

        void OnSizeSouthWest(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            Window wnd = ((FrameworkElement)sender).TemplatedParent as Window;
            if (wnd != null)
            {
                WindowInteropHelper helper = new WindowInteropHelper(wnd);
                DragSize(helper.Handle, SizingAction.SouthWest);
            }
        }


        #endregion

        #region P/Invoke and helper method

        const int WM_SYSCOMMAND = 0x112;
        const int SC_SIZE = 0xF000;


        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        static extern IntPtr SendMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

        void DragSize(IntPtr handle, SizingAction sizingAction)
        {
            if (System.Windows.Input.Mouse.LeftButton == System.Windows.Input.MouseButtonState.Pressed)
            {
                SendMessage(handle, WM_SYSCOMMAND, (IntPtr)(SC_SIZE + sizingAction), IntPtr.Zero);
                SendMessage(handle, 514, IntPtr.Zero, IntPtr.Zero);
            }
        }

        #endregion

        #region helper enum

        public enum SizingAction
        {
            North = 3,
            South = 6,
            East = 2,
            West = 1,
            NorthEast = 5,
            NorthWest = 4,
            SouthEast = 8,
            SouthWest = 7
        }

        #endregion

    }
}
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace IMS_client
{
    public class TitleBar : Control
    {
        ImageButton closeButton;
        ImageButton maxButton;
        ImageButton minButton;

        public TitleBar()
        {
            this.MouseLeftButtonDown += new MouseButtonEventHandler(OnTitleBarLeftButtonDown);
            this.MouseDoubleClick += new MouseButtonEventHandler(TitleBar_MouseDoubleClick);
            this.Loaded += new RoutedEventHandler(TitleBar_Loaded);
        }

        void TitleBar_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            MaxButton_Click(sender, e);
        }

        void TitleBar_Loaded(object sender, RoutedEventArgs e)
        {
            closeButton = (ImageButton)this.Template.FindName("CloseButton", this);
            minButton = (ImageButton)this.Template.FindName("MinButton", this);
            maxButton = (ImageButton)this.Template.FindName("MaxButton", this);

            closeButton.Click += new RoutedEventHandler(CloseButton_Click);
            minButton.Click += new RoutedEventHandler(MinButton_Click);
            maxButton.Click += new RoutedEventHandler(MaxButton_Click);
        }


        static TitleBar()
        {
            //This OverrideMetadata call tells the system that this element wants to provide a style that is different than its base class.
            //This style is defined in themes\generic.xaml
            DefaultStyleKeyProperty.OverrideMetadata(typeof(TitleBar), new FrameworkPropertyMetadata(typeof(TitleBar)));
        }

        #region event handlers

        void OnTitleBarLeftButtonDown(object sender, MouseEventArgs e)
        {
            Window window = this.TemplatedParent as Window;
            if (window != null)
            {
                window.DragMove();
            }
        }

        void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            Window window = this.TemplatedParent as Window;
            if (window != null)
            {
                window.Close();
            }
        }

        void MinButton_Click(object sender, RoutedEventArgs e)
        {
            Window window = this.TemplatedParent as Window;
            if (window != null)
            {
                window.WindowState = WindowState.Minimized;
            }
        }

        void MaxButton_Click(object sender, RoutedEventArgs e)
        {
            Window window = this.TemplatedParent as Window;
            if (window != null)
            {
                if (window.WindowState == WindowState.Maximized)
                {
                    maxButton.ImageDown = "Images/maxpressed_n.png";
                    maxButton.ImageNormal = "Images/max_n.png";
                    maxButton.ImageOver = "Images/maxhot_n.png";

                    window.WindowState = WindowState.Normal;
                }
                else
                {
                    maxButton.ImageDown = "Images/normalpress.png";
                    maxButton.ImageNormal = "Images/normal.png";
                    maxButton.ImageOver = "Images/normalhot.png";

                    window.WindowState = WindowState.Maximized;
                }
            }
        }

        #endregion

        #region properties

        public string Title
        {
            get { return (string)GetValue(TitleProperty); }
            set { SetValue(TitleProperty, value); }
        }

        public ImageSource Icon
        {
            get { return (ImageSource)GetValue(IconProperty); }
            set { SetValue(IconProperty, value); }
        }


        #endregion

        #region dependency properties

        public static readonly DependencyProperty TitleProperty =
           DependencyProperty.Register(
               "Title", typeof(string), typeof(TitleBar));

        public static readonly DependencyProperty IconProperty =
           DependencyProperty.Register(
               "Icon", typeof(ImageSource), typeof(TitleBar));

        #endregion
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace IMS_client
{
    /// <summary>
    /// Interaction logic for Video_Window.xaml
    /// </summary>
    public partial class Video_Window : Window
    {
        public Video_Window()
        {
            InitializeComponent();
        }
    }
}
﻿using System;
using System.IO;
using System.Net;
using System.Text;
using System.Windows;
using System.Xml;
using System.Xml.Linq;
namespace IMS_client
{
    public class HttpRequestEventArgs : EventArgs
    {
        public HttpWebRequest request;
        public string content;

        public HttpRequestEventArgs(HttpWebRequest Request, string Content)
        {
            this.request = Request;
            content = Content;
        }
    }

    public class HttpWebResponseEventArgs : EventArgs
    {
        public HttpWebResponse response;
        public string content;

        public HttpWebResponseEventArgs(HttpWebResponse Response, string Content)
        {
            this.response = Response;
            content = Content;
        }
    }

    public class XDMS_handler
    {
        public event EventHandler<HttpWebResponseEventArgs> Response_Log_Event;
        public event EventHandler<HttpRequestEventArgs> Request_Log_Event;
        string user_name { get; set; }
        string password { get; set; }
        string server_name { get; set; }
        int server_port { get; set; }
        string realm { get; set; }



        public XDMS_handler(string User_name, string Password, string Server_name, int Port, string Realm)
        {
            user_name = User_name;
            password = Password;
            server_name = Server_name;
            server_port = Port;
            realm = Realm;
        }

        public void Store_File(string xml_doc_name, string xml)
        {

            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(new Uri(new Uri("http://" + server_name + ":" + server_port), "/xcap-root/test-app/users/" + "sip:" + user_name + "@" + realm + "/Resources/" + xml_doc_name));
                request.Method = "PUT";
                request.Credentials = request.Credentials = new NetworkCredential(user_name, password);
                request.ContentType = "application/test-app+xml";

                StreamWriter writer = new StreamWriter(request.GetRequestStream());

                writer.WriteLine(xml);
                writer.Close();

             if (this.Request_Log_Event!= null)
            {
                this.Request_Log_Event(this,new HttpRequestEventArgs(request,XDocument.Parse(xml).ToString()));
            }

             HttpWebResponse response = (HttpWebResponse)request.GetResponse();

             Stream resStream = response.GetResponseStream();
            
                 StringBuilder sb = new StringBuilder();

                // used on each read operation
            byte[] buf = new byte[8192];

             string tempString = null;
             int count = 0;

             do
             {
                 // fill the buffer with data
                 count = resStream.Read(buf, 0, buf.Length);

                 // make sure we read some data
                 if (count != 0)
                 {
                     // translate from bytes to ASCII text
                     tempString = Encoding.ASCII.GetString(buf, 0, count);

                     // continue building the string
                     sb.Append(tempString);
                 }
             }
             while (count > 0); // any more data to read?


                if (this.Response_Log_Event != null)
                {
                    this.Response_Log_Event(this, new HttpWebResponseEventArgs(response,sb.ToString()));
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("Error storing xml file. " + e.Message.ToString());
            }
        }

        public XDocument Retrieve_File(string xml_doc_name)
        {
            XDocument xml_document = new XDocument();
            XmlWriter writer = xml_document.CreateWriter();

            try
            {

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(new Uri(new Uri("http://" + server_name + ":" + server_port), "/xcap-root/test-app/users/" + "sip:" + user_name + "@" + realm + "/" + xml_doc_name));
                request.Method = "GET";
                request.Credentials = request.Credentials = new NetworkCredential(user_name, password);
                request.ContentType = "application/test-app+xml";

                XmlWriter xml_writer = xml_document.CreateWriter();

                // used to build entire input
                StringBuilder sb = new StringBuilder();

                // used on each read operation
                byte[] buf = new byte[8192];

                if (this.Request_Log_Event != null)
                {
                    this.Request_Log_Event(this, new HttpRequestEventArgs(request,"No Content"));
                }


                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                
                Stream resStream = response.GetResponseStream();

                string tempString = null;
                int count = 0;

                do
                {
                    // fill the buffer with data
                    count = resStream.Read(buf, 0, buf.Length);

                    // make sure we read some data
                    if (count != 0)
                    {
                        // translate from bytes to ASCII text
                        tempString = Encoding.ASCII.GetString(buf, 0, count);

                        // continue building the string
                        sb.Append(tempString);
                    }
                }
                while (count > 0); // any more data to read?

                xml_document = XDocument.Parse(sb.ToString());

                if (this.Response_Log_Event != null)
                {
                    this.Response_Log_Event(this, new HttpWebResponseEventArgs(response,xml_document.ToString()));
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("Error retrieving network stored address book - check XDMS settings. Error:" + e.Message.ToString());
            }
            return xml_document;
        }
    }
}
